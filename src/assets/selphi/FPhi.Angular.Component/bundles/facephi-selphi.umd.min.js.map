{"version":3,"sources":["ng://facephi-selphi/lib/models/facephi-selphi-configuration.ts","ng://facephi-selphi/lib/services/helpers/rxjs-helper.ts","ng://facephi-selphi/lib/services/fphi-selphi-widget.service.ts","ng://facephi-selphi/lib/components/facephi-selphi/facephi-selphi.component.ts","ng://facephi-selphi/lib/models/facephi-selphi-constants.ts","ng://facephi-selphi/lib/facephi-selphi.module.ts"],"names":["FPhiSelphiConfiguration","prototype","getNativeConfiguration","configurationManager","window","Selphi","ConfigurationManager","this","setNativeConfiguration","widgetContainer","setContainer","resourcesPath","setResourcesPath","graphPath","setGraphPath","language","setLanguage","dpiList","setDpiList","tryParseInt","cameraWidth","setCameraWidth","cameraHeight","setCameraHeight","cameraRotation","setCameraRotation","cameraType","setCameraType","tutorial","setTutorial","extractionMode","setMode","livenessMode","setLivenessMode","livenessPrecision","setLivenessPrecision","livenessMoveInitialError","setLivenessMoveInitialError","tryParseFloat","livenessMoveInfoTime","setLivenessMoveInfoTime","interactible","setInteractible","registerTime","setRegisterTime","authenticateTime","setAuthenticateTime","imageFormat","setImageFormat","imageQuality","setImageQuality","logImages","setLogImages","cropFactor","setCropFactor","cropImage","setCropImage","templateFormat","setTemplateFormat","stabilizationStage","setStabilizationStage","videoRecord","setVideoRecord","videoRecordRate","setVideoRecordRate","videoRecordScale","setVideoRecordScale","videoRecordType","setVideoRecordType","onModuleLoaded","setOnModuleLoaded","onStabilizing","setOnStabilizing","onExtractionFinish","setOnExtractionFinish","onUserCancel","setOnUserCancel","onExceptionCaptured","setOnExceptionCaptured","onLivenessError","setOnLivenessError","onLivenessErrorButtonClick","setOnLivenessErrorButtonClick","onExtractionTimeout","setOnExtractionTimeout","onTimeoutErrorButtonClick","setOnTimeoutErrorButtonClick","onTrackStatus","setOnTrackStatus","property","configurationSetterFunc","context","undefined","bind","value","intValue","parseInt","isNaN","floatValue","parseFloat","RxjsHelper","poll","pollTime","evalFunc","successFunc","delayTime","subscription","timer","subscribe","unsubscribe","FPhiSelphiWidgetService","Object","defineProperty","_assetsBasePath","loadControl","basePath","_this","fPhiWidgetScript","_renderer","createElement","setAttribute","fPhiWidgetScriptPath","appendChild","document","body","Observable","subscriber","fPhiSelphiNamespace","Widget","next","removeControl","_fPhiWidget","_fPhiWidgetConfiguration","querySelectorAll","forEach","element","parentNode","removeChild","createUserControl","config","debugMode","debug","startUserControl","Start","stopUserControl","Stop","Injectable","args","providedIn","Inject","DOCUMENT","RendererFactory2","rendererFactory","createRenderer","FacePhiSelphiComponent","_cssClass","componentWidth","endsWith","NaN","componentHeight","_widgetConfiguration","ngOnInit","widgetInitFunc","onComponentLoaded","emit","widgetService","nativeElement","setupEvents","autoLoadLibResources","widgetLibPath","ngOnDestroy","eventData","stabilizingResult","extractionResult","exceptionResult","livenessErrorResult","extractionTimeoutResult","Component","selector","template","Input","type","HostBinding","ViewChild","Output","EventEmitter","FPhiSelphiConstants","CameraRotation","None","Deg90","Deg180","Deg270","ExtractionMode","Register","Authenticate","LivenessMode","Blink","Move","Passive","ExceptionType","CameraError","ExtractorError","ControlNotInitializedError","ImageCropResizeError","UnexpectedCaptureError","SampleDiagnostic","Ok","FaceNotFound","RightEyeNotFound","LeftEyeNotFound","EyesNotFound","FaceTooFar","FaceTooClose","TooCloseToWindowSide","AngleExceeded","QualityCheckFailed","NotRated","FinalDiagnostic","InsufficientValidSamples","TemplateCreationInProgress","TemplateCreated","LivenessDiagnostic","PhotoDetected","LivenessDetected","Unsuccess","UnsuccessLowPerformance","UnsuccessGlasses","UnsuccessLight","UnsuccessNoMovement","UnsuccessWrongDirection","UnsuccessTooFar","TemplateFormat","ByteArray","Base64","RecorderType","Gif","Remote","CameraType","Front","Back","TrackStatus","ChangeState","Tap","FacePhiSelphiModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { FPhiSelphiConstants } from \"./facephi-selphi-constants\";\n\n/**\n * Modelo con la informaciÃ³n de configuraciÃ³n del widget Selphi.\n */\nexport class FPhiSelphiConfiguration {\n\n    // #region \"Propiedades\"\n\n    /**\n     * Referencia al elemento del DOM que actÃºa como contenedor del widget web.\n     */\n    public widgetContainer: any;\n\n    /**\n     * Ruta donde estÃ¡ ubicado el fichero widget.xml y el resto de recursos personalizables del widget.\n     */\n    public resourcesPath: any;\n\n    /**\n     * Ruta donde estÃ¡ ubicado el fichero graph.xml.\n     */\n    public graphPath: any;\n\n    /**\n     * Idioma en que se mostrarÃ¡ la informaciÃ³n del widget.\n     */\n    public language: string;\n\n    /**\n     * Lista de densidades de pÃ­xeles en pantalla soportadas por el widget, de cara a mostrar las imÃ¡genes de recurso adecuadas a la pantalla actual.\n     */\n    public dpiList: Array<number>;\n\n    /**\n     * ResoluciÃ³n horizontal preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    public cameraWidth: number;\n\n    /**\n     * ResoluciÃ³n vertical preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    public cameraHeight: number;\n\n    /**\n     * RotaciÃ³n de la cÃ¡mara.\n     */\n    public cameraRotation: any;\n\n    /**\n     * Selector de tipo de cÃ¡mara a utilizar para realizar la captura (frontal o trasera).\n     */\n    public cameraType: any;\n\n    /**\n     * Indica si el tutorial estÃ¡ disponible en el widget.\n     */\n    public tutorial: boolean;\n\n    /**\n     * Modo de extracciÃ³n o flujo de ejecuciÃ³n utilizado por el widget.\n     */\n    public extractionMode: any;\n\n    /**\n     * Modos de verificaciÃ³n de prueba de vida utilizado por el widget.\n     */\n    public livenessMode: any;\n\n    /**\n     * \n     */\n    public livenessPrecision: number;\n\n    /**\n     * \n     */\n    public livenessMoveInitialError: number;\n\n    /**\n     * \n     */\n    public livenessMoveInfoTime: number;\n\n    /**\n     * Indica si el widget permite la interacciÃ³n con el usuario.\n     */\n    public interactible: boolean;\n\n    /**\n     * Tiempo de registro en segundos.\n     */\n    public registerTime: number;\n\n    /**\n     * Tiempo de autenticaciÃ³n en segundos.\n     */\n    public authenticateTime: number;\n\n    /**\n     * Formato de las imÃ¡genes capturadas por el widget (MIME type).\n     */\n    public imageFormat: string;\n\n    /**\n     * Factor de calidad de las imÃ¡genes devueltas (rango 0.0 a 1.0). Ãnicamente aplicable cuando el formato de imagen se ha especificado como \"image/jpeg\".\n     */\n    public imageQuality: number;\n\n    /**\n     * \n     */\n    public logImages: boolean;\n\n    /**\n     * Factor de recorte de las imÃ¡genes devueltas por el widget.\n     */\n    public cropFactor: number;\n\n    /**\n     * Indica si el widget debe recortar las imÃ¡genes capturadas, o no.\n     */\n    public cropImage: boolean;\n\n    /**\n     * Formato de salida de la informaciÃ³n de template generada por el widget.\n     */\n    public templateFormat: number;\n\n    /**\n     * Activa la fase de estabilizaciÃ³n previa a la captura. Por defecto, la estabilizaciÃ³n estarÃ¡ desactivada.\n     * En caso de haber seleccionado LivenessMode==Move, este parÃ¡metro no se tendrÃ¡ en cuenta y siempre se realizarÃ¡ fase de estabilizado.\n     */\n    public stabilizationStage: boolean;\n\n    /**\n     * Indica si el widget debe grabar la sesiÃ³n del usuario en video.\n     */\n    public videoRecord: boolean;\n\n    /**\n     * Frecuencia de grabaciÃ³n (en frames por segundo).\n     */\n    public videoRecordRate: number;\n\n    /**\n     * Factor de escalado aplicado sobre las capturas realizadas para la generaciÃ³n del video.\n     * Toma valores porcentuales de 0.0 a 1.0 (que equivaldrÃ­a a una escala del 100% de resoluciÃ³n de cÃ¡mara seleccionada).\n     */\n    public videoRecordScale: number;\n\n    /**\n     * Tipo de salida del video generado. Los posibles valores se tomarÃ¡n del enumerado \"FPhi.Selphi.RecordType\".\n     */\n    public videoRecordType: any;\n\n    /**\n     * Activa el modo de depuraciÃ³n del widget, en el que se mostrarÃ¡n mensajes informativos en la consola del navegador.\n     */\n    public debugMode: boolean;\n\n    // #endregion\n\n    // #region \"Eventos\"\n\n    /**\n     * Evento lanzado por el widget cuando se ha finalizado el proceso de carga e inicializaciÃ³n, tando del widget, como de los recursos asociados al mismo.\n     */\n    public onModuleLoaded: any;\n\n    /**\n     * Evento lanzado durante los ciclos de estabilizaciÃ³n de la imagen para la correcta realizaciÃ³n de la captura.\n     * @callback evt {{ detail: FPhiSelphiConstants.SampleDiagnostic }}\n     */\n    public onStabilizing: any;\n\n    /**\n     * Evento lanzado cuando el proceso de extracciÃ³n ha finalizado correctamente. Devuelve el resultado de la captura.\n     * @callback evt {{ template, images, timeStamp, templateRaw, livenessMoveFails, sunGlassesScore, livenessMoveHistory, livenessMoveStabilizedHistory, livenessMoveStabilizedStatus }}\n     */\n    public onExtractionFinish: any;\n\n    /**\n     * Evento lanzado cuando el usuario cancela el proceso de extracciÃ³n.\n     */\n    public onUserCancel: any;\n\n    /**\n     * Evento lanzado en caso de que se produzca un error interno del widget.\n     * @callback evt {{ detail: { message: string, exceptionType: FPhiSelphiConstants.ExceptionType } }}\n     */\n    public onExceptionCaptured: any;\n\n    /**\n     * Evento lanzado cuando el proceso de verificaciÃ³n de autenticidad por prueba de vida falla.\n     * @callback evt {{ detail: { template, images, timeStamp, templateRaw, livenessMoveFails, sunGlassesScore, livenessMoveHistory, livenessMoveStabilizedHistory, livenessMoveStabilizedStatus } }}\n     */\n    public onLivenessError: any;\n\n    /**\n     * Evento lanzado cuando el proceso de verificaciÃ³n de autenticidad por prueba de vida falla y el usuario pulsa el botÃ³n de la pantalla de error mostrada.\n     */\n    public onLivenessErrorButtonClick: any;\n\n    /**\n     * Evento lanzado si el proceso de captura excede el tiempo mÃ¡ximo disponible.\n     * @callback evt {{ detail: { template, images, timeStamp, templateRaw, livenessMoveFails, sunGlassesScore, livenessMoveHistory, livenessMoveStabilizedHistory, livenessMoveStabilizedStatus } }}\n     */\n    public onExtractionTimeout: any;\n\n    /**\n     * Evento lanzado cuando el proceso de captura excede el tiempo mÃ¡ximo disponible y el usuario pulsa el botÃ³n de la pantalla de error mostrada.\n     */\n    public onTimeoutErrorButtonClick: any;\n\n    /**\n     * Evento lanzado tras cualquier acciÃ³n realizada por el usuario sobre la interfaz grÃ¡fica del widget o ante cualquier cambio de estado\n     * durante el proceso de captura.\n     */\n    public onTrackStatus: any;\n\n    // #endregion\n\n    // #region \"MÃ©todos pÃºblicos\"\n\n    /**\n     * Genera una instancia de \"FPhi.Selphi.ConfigurationManager\" con los datos de configuraciÃ³n de la instancia actual para inicializar el widget.\n     */\n    public getNativeConfiguration() {\n        const configurationManager = new window[\"FPhi\"].Selphi.ConfigurationManager();\n\n        // Propiedades de configuraciÃ³n\n        this.setNativeConfiguration(this.widgetContainer, configurationManager.setContainer, configurationManager);\n        this.setNativeConfiguration(this.resourcesPath, configurationManager.setResourcesPath, configurationManager);\n        this.setNativeConfiguration(this.graphPath, configurationManager.setGraphPath, configurationManager);\n        this.setNativeConfiguration(this.language, configurationManager.setLanguage, configurationManager);\n        this.setNativeConfiguration(this.dpiList, configurationManager.setDpiList, configurationManager);\n\n        this.setNativeConfiguration(this.tryParseInt(this.cameraWidth), configurationManager.setCameraWidth, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.cameraHeight), configurationManager.setCameraHeight, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.cameraRotation), configurationManager.setCameraRotation, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.cameraType), configurationManager.setCameraType, configurationManager);\n\n        this.setNativeConfiguration(this.tutorial, configurationManager.setTutorial, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.extractionMode), configurationManager.setMode, configurationManager);\n\n        this.setNativeConfiguration(this.tryParseInt(this.livenessMode), configurationManager.setLivenessMode, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.livenessPrecision), configurationManager.setLivenessPrecision, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.livenessMoveInitialError), configurationManager.setLivenessMoveInitialError, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.livenessMoveInfoTime), configurationManager.setLivenessMoveInfoTime, configurationManager);\n\n        this.setNativeConfiguration(this.interactible, configurationManager.setInteractible, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.registerTime), configurationManager.setRegisterTime, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.authenticateTime), configurationManager.setAuthenticateTime, configurationManager);\n\n        this.setNativeConfiguration(this.imageFormat, configurationManager.setImageFormat, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.imageQuality), configurationManager.setImageQuality, configurationManager);\n        this.setNativeConfiguration(this.logImages, configurationManager.setLogImages, configurationManager);\n\n        this.setNativeConfiguration(this.tryParseFloat(this.cropFactor), configurationManager.setCropFactor, configurationManager);\n        this.setNativeConfiguration(this.cropImage, configurationManager.setCropImage, configurationManager);\n\n        this.setNativeConfiguration(this.tryParseInt(this.templateFormat), configurationManager.setTemplateFormat, configurationManager);\n        this.setNativeConfiguration(this.stabilizationStage, configurationManager.setStabilizationStage, configurationManager);\n\n        this.setNativeConfiguration(this.videoRecord, configurationManager.setVideoRecord, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.videoRecordRate), configurationManager.setVideoRecordRate, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.videoRecordScale), configurationManager.setVideoRecordScale, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.videoRecordType), configurationManager.setVideoRecordType, configurationManager);\n\n        // Eventos\n        this.setNativeConfiguration(this.onModuleLoaded, configurationManager.setOnModuleLoaded, configurationManager);\n        this.setNativeConfiguration(this.onStabilizing, configurationManager.setOnStabilizing, configurationManager);\n        this.setNativeConfiguration(this.onExtractionFinish, configurationManager.setOnExtractionFinish, configurationManager);\n        this.setNativeConfiguration(this.onUserCancel, configurationManager.setOnUserCancel, configurationManager);\n        this.setNativeConfiguration(this.onExceptionCaptured, configurationManager.setOnExceptionCaptured, configurationManager);\n        this.setNativeConfiguration(this.onLivenessError, configurationManager.setOnLivenessError, configurationManager);\n        this.setNativeConfiguration(this.onLivenessErrorButtonClick, configurationManager.setOnLivenessErrorButtonClick, configurationManager);\n        this.setNativeConfiguration(this.onExtractionTimeout, configurationManager.setOnExtractionTimeout, configurationManager);\n        this.setNativeConfiguration(this.onTimeoutErrorButtonClick, configurationManager.setOnTimeoutErrorButtonClick, configurationManager);\n        this.setNativeConfiguration(this.onTrackStatus, configurationManager.setOnTrackStatus, configurationManager);\n\n        return configurationManager;\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos privados\"\n\n    private setNativeConfiguration(property, configurationSetterFunc, context: any = null) {\n        if (property === null || property === undefined)\n            return;\n\n        const setterFunc = context ? configurationSetterFunc.bind(context) : configurationSetterFunc;\n        setterFunc(property);\n    }\n\n    private tryParseInt(value: any) {\n        var intValue = parseInt(value);\n        return !isNaN(intValue) ? intValue : value;\n    }\n\n    private tryParseFloat(value: any) {\n        var floatValue = parseFloat(value);\n        return !isNaN(floatValue) ? floatValue : value;\n    }\n\n    // #endregion\n}\n","import { timer } from \"rxjs/index\";\n\nexport class RxjsHelper {\n\n    /**\n     * Encapsula una rutina de chequeo de una condiciÃ³n hasta que Ã©sta se cumpla.\n     * @param pollTime Intervalo de chequeo (en ms).\n     * @param evalFunc FunciÃ³n para evaluar la condiciÃ³n deseada.\n     * @param successFunc FunciÃ³n a invocar cuando la condiciÃ³n se cumpla.\n     * @param delayTime Tiempo de retardo para iniciar el proceso de chequeo. Por defecto 0ms.\n     */\n    public static poll(pollTime: number,\n                       evalFunc: any,\n                       successFunc: any,\n                       delayTime: number = 0) {\n        const subscription = timer(delayTime, pollTime)\n            .subscribe(\n                () => {\n                    if (!evalFunc())\n                        return;\n\n                    subscription.unsubscribe();\n                    successFunc();\n                }\n            );\n    }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { Renderer2, RendererFactory2 } from \"@angular/core\";\nimport { DOCUMENT } from \"@angular/common\";\n\nimport { Observable } from \"rxjs\";\nimport { RxjsHelper } from \"./helpers/rxjs-helper\";\n\nimport { FPhiSelphiConfiguration } from \"../models/facephi-selphi-configuration\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FPhiSelphiWidgetService {\n\n    // #region \"Atributos\"\n\n    private _renderer: Renderer2;\n\n    private _assetsBasePath: string;\n    private _fPhiWidgetConfiguration: FPhiSelphiConfiguration;\n    private _fPhiWidget: any;\n\n    // #endregion\n\n    // #region \"Propiedades\"\n\n    private get fPhiSelphiNamespace() { return window[\"FPhi\"] && window[\"FPhi\"].Selphi ? window[\"FPhi\"].Selphi : undefined; }\n\n    private set fPhiSelphiNamespace(value: any) {\n        if (window[\"FPhi\"])\n            window[\"FPhi\"].Selphi = value;\n    }\n\n    private get fPhiWidgetScriptPath(): string { return `${this._assetsBasePath}/FPhi.Widget.wasm.js`; }\n\n    // #endregion\n\n    // #region \"Constructores\"\n\n    constructor(\n        @Inject(DOCUMENT) private document: any,\n        private rendererFactory: RendererFactory2\n    ) {\n        this._renderer = this.rendererFactory.createRenderer(null, null);\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos pÃºblicos\"\n\n    /**\n     * Realiza la carga dinÃ¡mica del recurso javascript del widget web.\n     * @param basePath Ruta base de la carpeta de los ficheros del widget.\n     */\n    public loadControl(basePath: string): Observable<FPhiSelphiWidgetService> {\n        //console.log(`>>>> FPhiSelphiWidgetService :: loadControl --> basePath: ${basePath}`);\n        this._assetsBasePath = basePath;\n\n        const fPhiWidgetScript = this._renderer.createElement(\"script\");\n        this._renderer.setAttribute(fPhiWidgetScript, \"src\", this.fPhiWidgetScriptPath);\n        this._renderer.setAttribute(fPhiWidgetScript, \"type\", \"text/javascript\");\n        this._renderer.appendChild(this.document.body, fPhiWidgetScript);\n\n        return new Observable<FPhiSelphiWidgetService>(subscriber => {\n            RxjsHelper.poll(5,\n                () => this.fPhiSelphiNamespace !== null && this.fPhiSelphiNamespace !== undefined && this.fPhiSelphiNamespace.Widget !== null && this.fPhiSelphiNamespace.Widget !== undefined,\n                () => subscriber.next(this)\n            );\n        });\n    }\n\n    /**\n     * Elimina los recursos javascript del widget incluidos en el DOM de la pÃ¡gina.\n     */\n    public removeControl(): FPhiSelphiWidgetService {\n        if (!this._assetsBasePath)\n            return this;\n\n        //console.warn(`>>>> FPhiSelphiWidgetService :: removeControl(\"${this._assetsBasePath}\")`);\n        delete this._fPhiWidget;\n        delete this._fPhiWidgetConfiguration;\n        delete this.fPhiSelphiNamespace;\n\n        this._fPhiWidget = undefined;\n        this._fPhiWidgetConfiguration = undefined;\n        this.fPhiSelphiNamespace = undefined;\n\n        this.document\n            .querySelectorAll(`script[src*=\"${this._assetsBasePath}\"]`)\n            .forEach(element => { element.parentNode.removeChild(element); });\n\n        this.document\n            .querySelectorAll(\"style#FPhi_Widget_style\")\n            .forEach(element => { element.parentNode.removeChild(element); });\n\n        //console.warn(`>>>> FPhiSelphiWidgetService :: Control removed`);\n        return this;\n    }\n\n    /**\n     * Crea una instancia del widget web nativo con los datos de configuraciÃ³n indicados.\n     * @param config Datos de configuraciÃ³n del widget.\n     */\n    public createUserControl(config: FPhiSelphiConfiguration): FPhiSelphiWidgetService {\n        //console.warn(\">>>> FPhiSelphiWidgetService :: createUserControl\", config, config.getNativeConfiguration());\n\n        this._fPhiWidgetConfiguration = config;\n        this._fPhiWidget = new this.fPhiSelphiNamespace.Widget(config.getNativeConfiguration());\n        //console.log(this._fPhiWidget);\n\n        if (this._fPhiWidgetConfiguration.debugMode !== null && this._fPhiWidgetConfiguration.debugMode !== undefined)\n            this._fPhiWidget.debug = this._fPhiWidgetConfiguration.debugMode;\n\n        //console.log(this._fPhiWidget);\n        return this;\n    }\n\n    /**\n     * Inicia el widget.\n     */\n    public startUserControl(): FPhiSelphiWidgetService {\n        if (this._fPhiWidget)\n            this._fPhiWidget.Start();\n\n        return this;\n    }\n\n    /**\n     * Detiene la ejecuciÃ³n del widget.\n     */\n    public stopUserControl(): FPhiSelphiWidgetService {\n        if (this._fPhiWidget)\n            this._fPhiWidget.Stop();\n\n        return this;\n    }\n\n    // #endregion\n}\n","import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding\n} from \"@angular/core\";\n\nimport { FPhiSelphiConfiguration } from \"../../models/facephi-selphi-configuration\";\nimport { FPhiSelphiWidgetService } from \"../../services/fphi-selphi-widget.service\";\n\n\n@Component({\n    selector: \"facephi-selphi\",\n    templateUrl: \"./facephi-selphi.component.html\",\n    styleUrls: [\"./facephi-selphi.component.scss\"]\n})\nexport class FacePhiSelphiComponent implements OnInit, OnDestroy {\n\n    // #region \"Atributos\"\n\n    private _cssClass: string = \"\";\n    private _widgetConfiguration: FPhiSelphiConfiguration = new FPhiSelphiConfiguration();\n\n    // #endregion\n\n    // #region \"Propiedades\"\n\n    @Input(\"class\")\n    @HostBinding(\"class\")\n    public get cssClass(): string {\n        return this._cssClass;\n    }\n\n    public set cssClass(value: string) {\n        if (value)\n            this._cssClass += ` ${value}`;\n    }\n\n    /**\n     * Anchura del componente.\n     */\n    @Input(\"width\")\n    public componentWidth: any;\n\n    public get widgetWidth(): any {\n        return this.componentWidth\n            ? typeof this.componentWidth === \"string\" && this.componentWidth.endsWith(\"%\")\n                ? this.componentWidth\n                : parseFloat(this.componentWidth) !== NaN\n                    ? `${parseFloat(this.componentWidth)}px`\n                    : this.componentWidth\n            : \"100%\";\n    }\n\n    /**\n     * Altura del componente.\n     */\n    @Input(\"height\")\n    public componentHeight: any;\n\n    public get widgetHeight(): any {\n        return this.componentHeight\n            ? typeof this.componentHeight === \"string\" && this.componentHeight.endsWith(\"%\")\n                ? this.componentHeight\n                : parseFloat(this.componentHeight) !== NaN\n                    ? `${parseFloat(this.componentHeight)}px`\n                    : this.componentHeight\n            : \"100%\";\n    }\n\n    /**\n     * Referencia interna al contenedor sobre el que se generarÃ¡ el widget web.\n     */\n    @ViewChild(\"widgetContainer\")\n    public readonly widgetContainer: ElementRef;\n\n    /**\n     * Clases CSS aplicadas sobre el contenedor del widget web.\n     */\n    @Input()\n    public containerCssClass: string;\n\n    // #region \"ConfiguraciÃ³n\"\n\n    /**\n     * Ruta en la que estÃ¡n localizados los recursos javascript nativos del widget web.\n     */\n    @Input()\n    public widgetLibPath = \"assets/lib/facephi/selphi\";\n\n    /**\n     * Flag para indicar si queremos que sea el componente el encargado de cargar e inicializar todos los recursos javascript del widget y borrarlos en su evento 'onDestroy'.\n     */\n    @Input()\n    public autoLoadLibResources: boolean = true;\n\n    /**\n     * Ruta donde estÃ¡ ubicado el fichero widget.xml y el resto de recursos personalizables del widget.\n     */\n    @Input()\n    public set resourcesPath(value: string) {\n        this._widgetConfiguration.resourcesPath = value;\n    }\n\n    public get resourcesPath(): string { return this._widgetConfiguration.resourcesPath; }\n\n    /**\n     * Ruta donde estÃ¡ ubicado el fichero graph.xml.\n     */\n    @Input()\n    public set graphPath(value: string) {\n        this._widgetConfiguration.graphPath = value;\n    }\n\n    public get graphPath(): string { return this._widgetConfiguration.graphPath; }\n\n    /**\n     * Idioma en que se mostrarÃ¡ la informaciÃ³n del widget.\n     */\n    @Input()\n    public set language(value: string) {\n        this._widgetConfiguration.language = value;\n    }\n\n    public get language(): string { return this._widgetConfiguration.language; }\n\n    /**\n     * Lista de densidades de pÃ­xeles en pantalla soportadas por el widget, de cara a mostrar las imÃ¡genes de recurso adecuadas a la pantalla actual.\n     */\n    @Input()\n    public set dpiList(value: Array<number>) {\n        this._widgetConfiguration.dpiList = value;\n    }\n\n    public get dpiList(): Array<number> { return this._widgetConfiguration.dpiList; }\n\n    /**\n     * ResoluciÃ³n horizontal preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    @Input()\n    public set cameraWidth(value: number) {\n        this._widgetConfiguration.cameraWidth = value;\n    }\n\n    public get cameraWidth(): number { return this._widgetConfiguration.cameraWidth; }\n\n    /**\n     * ResoluciÃ³n vertical preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    @Input()\n    public set cameraHeight(value: number) {\n        this._widgetConfiguration.cameraHeight = value;\n    }\n\n    public get cameraHeight(): number { return this._widgetConfiguration.cameraHeight; }\n\n    /**\n     * RotaciÃ³n de la cÃ¡mara.\n     */\n    @Input()\n    public set cameraRotation(value: any) {\n        this._widgetConfiguration.cameraRotation = value;\n    }\n\n    public get cameraRotation(): any { return this._widgetConfiguration.cameraRotation; }\n\n    /**\n     * Selector de tipo de cÃ¡mara a utilizar para realizar la captura (frontal o trasera).\n     */\n    @Input()\n    public set cameraType(value: any) {\n        this._widgetConfiguration.cameraType = value;\n    }\n\n    public get cameraType(): any { return this._widgetConfiguration.cameraType; }\n\n    /**\n     * Indica si el tutorial estÃ¡ disponible en el widget.\n     */\n    @Input()\n    public set tutorial(value: boolean) {\n        this._widgetConfiguration.tutorial = value;\n    }\n\n    public get tutorial(): boolean { return this._widgetConfiguration.tutorial; }\n\n    /**\n     * Modo de extracciÃ³n o flujo de ejecuciÃ³n utilizado por el widget.\n     */\n    @Input()\n    public set extractionMode(value: any) {\n        this._widgetConfiguration.extractionMode = value;\n    }\n\n    public get extractionMode(): any { return this._widgetConfiguration.extractionMode; }\n\n    /**\n     * Modos de verificaciÃ³n de prueba de vida utilizado por el widget.\n     */\n    @Input()\n    public set livenessMode(value: any) {\n        this._widgetConfiguration.livenessMode = value;\n    }\n\n    public get livenessMode(): any { return this._widgetConfiguration.livenessMode; }\n\n    /**\n     * \n     */\n    @Input()\n    public set livenessPrecision(value: number) {\n        this._widgetConfiguration.livenessPrecision = value;\n    }\n\n    public get livenessPrecision(): number { return this._widgetConfiguration.livenessPrecision; }\n\n    /**\n     * \n     */\n    @Input()\n    public set livenessMoveInitialError(value: number) {\n        this._widgetConfiguration.livenessMoveInitialError = value;\n    }\n\n    public get livenessMoveInitialError(): number { return this._widgetConfiguration.livenessMoveInitialError; }\n\n    /**\n     * \n     */\n    @Input()\n    public set livenessMoveInfoTime(value: number) {\n        this._widgetConfiguration.livenessMoveInfoTime = value;\n    }\n\n    public get livenessMoveInfoTime(): number { return this._widgetConfiguration.livenessMoveInfoTime; }\n\n    /**\n     * Indica si el widget permite la interacciÃ³n con el usuario.\n     */\n    @Input()\n    public set interactible(value: boolean) {\n        this._widgetConfiguration.interactible = value;\n    }\n\n    public get interactible(): boolean { return this._widgetConfiguration.interactible; }\n\n    /**\n     * Tiempo de registro en segundos.\n     */\n    @Input()\n    public set registerTime(value: number) {\n        this._widgetConfiguration.registerTime = value;\n    }\n\n    public get registerTime(): number { return this._widgetConfiguration.registerTime; }\n\n    /**\n     * Tiempo de autenticaciÃ³n en segundos.\n     */\n    @Input()\n    public set authenticateTime(value: number) {\n        this._widgetConfiguration.authenticateTime = value;\n    }\n\n    public get authenticateTime(): number { return this._widgetConfiguration.authenticateTime; }\n\n    /**\n     * Formato de las imÃ¡genes capturadas por el widget (MIME type).\n     */\n    @Input()\n    public set imageFormat(value: string) {\n        this._widgetConfiguration.imageFormat = value;\n    }\n\n    public get imageFormat(): string { return this._widgetConfiguration.imageFormat; }\n\n    /**\n     * Factor de calidad de las imÃ¡genes devueltas (rango 0.0 a 1.0). Ãnicamente aplicable cuando el formato de imagen se ha especificado como \"image/jpeg\".\n     */\n    @Input()\n    public set imageQuality(value: number) {\n        this._widgetConfiguration.imageQuality = value;\n    }\n\n    public get imageQuality(): number { return this._widgetConfiguration.imageQuality; }\n\n    /**\n     * \n     */\n    @Input()\n    public set logImages(value: boolean) {\n        this._widgetConfiguration.logImages = value;\n    }\n\n    public get logImages(): boolean { return this._widgetConfiguration.logImages; }\n\n    /**\n     * Factor de recorte de las imÃ¡genes devueltas por el widget.\n     */\n    @Input()\n    public set cropFactor(value: number) {\n        this._widgetConfiguration.cropFactor = value;\n    }\n\n    public get cropFactor(): number { return this._widgetConfiguration.cropFactor; }\n\n    /**\n     * Indica si el widget debe recortar las imÃ¡genes capturadas, o no.\n     */\n    @Input()\n    public set cropImage(value: boolean) {\n        this._widgetConfiguration.cropImage = value;\n    }\n\n    public get cropImage(): boolean { return this._widgetConfiguration.cropImage; }\n\n    /**\n     * Formato de salida de la informaciÃ³n de template generada por el widget.\n     */\n    @Input()\n    public set templateFormat(value: number) {\n        this._widgetConfiguration.templateFormat = value;\n    }\n\n    public get templateFormat(): number { return this._widgetConfiguration.templateFormat; }\n\n    /**\n     * Activa la fase de estabilizaciÃ³n previa a la captura. Por defecto, la estabilizaciÃ³n estarÃ¡ desactivada.\n     * En caso de haber seleccionado LivenessMode==Move, este parÃ¡metro no se tendrÃ¡ en cuenta y siempre se realizarÃ¡ fase de estabilizado.\n     */\n    @Input()\n    public set stabilizationStage(value: boolean) {\n        this._widgetConfiguration.stabilizationStage = value;\n    }\n\n    public get stabilizationStage(): boolean { return this._widgetConfiguration.stabilizationStage; }\n\n    /**\n     * Indica si el widget debe grabar la sesiÃ³n del usuario en video.\n     */\n    @Input()\n    public set videoRecord(value: boolean) {\n        this._widgetConfiguration.videoRecord = value;\n    }\n\n    public get videoRecord(): boolean { return this._widgetConfiguration.videoRecord; }\n\n    /**\n     * Frecuencia de grabaciÃ³n (en frames por segundo).\n     */\n    @Input()\n    public set videoRecordRate(value: number) {\n        this._widgetConfiguration.videoRecordRate = value;\n    }\n\n    public get videoRecordRate(): number { return this._widgetConfiguration.videoRecordRate; }\n\n    /**\n     * Factor de escalado aplicado sobre las capturas realizadas para la generaciÃ³n del video.\n     * Toma valores porcentuales de 0.0 a 1.0 (que equivaldrÃ­a a una escala del 100% de resoluciÃ³n de cÃ¡mara seleccionada).\n     */\n    @Input()\n    public set videoRecordScale(value: number) {\n        this._widgetConfiguration.videoRecordScale = value;\n    }\n\n    public get videoRecordScale(): number { return this._widgetConfiguration.videoRecordScale; }\n\n    /**\n     * Tipo de salida del video generado. Los posibles valores se tomarÃ¡n del enumerado \"FPhi.Selphi.RecordType\".\n     */\n    @Input()\n    public set videoRecordType(value: any) {\n        this._widgetConfiguration.videoRecordType = value;\n    }\n\n    public get videoRecordType(): any { return this._widgetConfiguration.videoRecordType; }\n\n    /**\n     * Activa el modo de depuraciÃ³n del widget, en el que se mostrarÃ¡n mensajes informativos en la consola del navegador.\n     */\n    @Input()\n    public set debugMode(value: boolean) {\n        this._widgetConfiguration.debugMode = value;\n    }\n\n    public get debugMode(): boolean { return this._widgetConfiguration.debugMode; }\n\n    // #endregion\n\n    // #region \"Eventos\"\n\n    /**\n     * Evento lanzado cuando los recursos del widget se han cargado correctamente.\n     */\n    @Output()\n    public onComponentLoaded = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado por el widget cuando se ha finalizado el proceso de carga e inicializaciÃ³n, tando del widget, como de los recursos asociados al mismo.\n     */\n    @Output()\n    public onModuleLoaded = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado durante los ciclos de estabilizaciÃ³n de la imagen para la correcta realizaciÃ³n de la captura.\n     */\n    @Output()\n    public onStabilizing = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de extracciÃ³n ha finalizado correctamente. Devuelve el resultado de la captura.\n     */\n    @Output()\n    public onExtractionFinish = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el usuario cancela el proceso de extracciÃ³n.\n     */\n    @Output()\n    public onUserCancel = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado en caso de que se produzca un error interno del widget.\n     */\n    @Output()\n    public onExceptionCaptured = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de verificaciÃ³n de autenticidad por prueba de vida falla.\n     */\n    @Output()\n    public onLivenessError = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de verificaciÃ³n de autenticidad por prueba de vida falla y el usuario pulsa el botÃ³n de la pantalla de error mostrada.\n     */\n    @Output()\n    public onLivenessErrorButtonClick = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado si el proceso de captura excede el tiempo mÃ¡ximo disponible.\n     */\n    @Output()\n    public onExtractionTimeout = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de captura excede el tiempo mÃ¡ximo disponible y el usuario pulsa el botÃ³n de la pantalla de error mostrada.\n     */\n    @Output()\n    public onTimeoutErrorButtonClick = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado tras cualquier acciÃ³n realizada por el usuario sobre la interfaz grÃ¡fica del widget o ante cualquier cambio de estado\n     * durante el proceso de captura.\n     */\n    @Output()\n    public onTrackStatus = new EventEmitter<any>();\n\n    // #endregion\n\n    // #endregion\n\n    // #region \"Constructores\"\n\n    constructor(\n        private widgetService: FPhiSelphiWidgetService\n    ) { }\n\n    ngOnInit() {\n        //console.warn(`>>>> [facephi-selphi] ngOnInit { autoLoadLibResources: ${this.autoLoadLibResources} }`, this.widgetContainer.nativeElement);\n        //console.log(`widgetContainer.offsetWidth: ${(this.widgetContainer.nativeElement as any).offsetWidth}`);\n        //console.log(`widgetContainer.offsetHeight: ${(this.widgetContainer.nativeElement as any).offsetHeight}`);\n\n        this._widgetConfiguration.widgetContainer = this.widgetContainer.nativeElement;\n        this.setupEvents();\n\n        const widgetInitFunc = () => {\n            //console.warn(\">>>> [facephi-selphi]  CONTROL LOADED!!\");\n            this.onComponentLoaded.emit();\n\n            this.widgetService\n                .createUserControl(this._widgetConfiguration)\n                .startUserControl();\n        };\n\n        if (this.autoLoadLibResources) {\n            this.widgetService\n                .loadControl(this.widgetLibPath)\n                .subscribe(widgetInitFunc);\n        } else\n            widgetInitFunc();\n    }\n\n    ngOnDestroy() {\n        //console.warn(\">>>> [facephi-selphi] ngOnDestroy\");\n        if (this.autoLoadLibResources) {\n            this.widgetService\n                .stopUserControl()\n                .removeControl();\n        }\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos privados\"\n\n    private setupEvents(): FacePhiSelphiComponent {\n        this._widgetConfiguration.onModuleLoaded = eventData => { this.onModuleLoaded.emit(eventData); };\n        this._widgetConfiguration.onStabilizing = stabilizingResult => { this.onStabilizing.emit(stabilizingResult); };\n        this._widgetConfiguration.onExtractionFinish = extractionResult => { this.onExtractionFinish.emit(extractionResult); };\n        this._widgetConfiguration.onUserCancel = () => { this.onUserCancel.emit(); };\n        this._widgetConfiguration.onExceptionCaptured = exceptionResult => { this.onExceptionCaptured.emit(exceptionResult); };\n        this._widgetConfiguration.onLivenessError = livenessErrorResult => { this.onLivenessError.emit(livenessErrorResult); };\n        this._widgetConfiguration.onLivenessErrorButtonClick = () => { this.onLivenessErrorButtonClick.emit(); };\n        this._widgetConfiguration.onExtractionTimeout = extractionTimeoutResult => { this.onExtractionTimeout.emit(extractionTimeoutResult); };\n        this._widgetConfiguration.onTimeoutErrorButtonClick = () => { this.onTimeoutErrorButtonClick.emit(); };\n        this._widgetConfiguration.onTrackStatus = eventData => { this.onTrackStatus.emit(eventData); };\n\n        return this;\n    }\n\n    // #endregion\n\n}\n","export class FPhiSelphiConstants {\n\n    /**\n     * Modos de rotaciÃ³n de la cÃ¡mara para la realizaciÃ³n de la captura.\n     */\n    public static readonly CameraRotation = {\n        None: 0,\n        Deg90: 1,\n        Deg180: 2,\n        Deg270: 3\n    }\n\n    /**\n     * Modos de extracciÃ³n o flujos de ejecuciÃ³n disponibles en el widget.\n     */\n    public static readonly ExtractionMode = {\n        /**\n         * Registro de usuarios.\n         */\n        Register: 0,\n\n        /**\n         * AutenticaciÃ³n de usuarios.\n         */\n        Authenticate: 1\n    }\n\n    /**\n     * Modos de verificaciÃ³n de prueba de vida disponibles.\n     */\n    public static readonly LivenessMode = {\n        /**\n         * VerificaciÃ³n de prueba de vida desactivada.\n         */\n        None: 0,\n\n        /**\n         * Prueba de vida mediante parpadeo.\n         */\n        Blink: 1,\n\n        /**\n         * Prueba de vida mediante movimiento.\n         */\n        Move: 2,\n\n        /**\n         * Prueba de vida pasivo.\n         */\n        Passive: 3\n    }\n\n    /**\n     * Tipo de excepciÃ³n producida durante la ejecuciÃ³n del widget.\n     */\n    public static readonly ExceptionType = {\n        CameraError: 0,\n        ExtractorError: 1,\n        ControlNotInitializedError: 2,\n        ImageCropResizeError: 3,\n        UnexpectedCaptureError: 4\n    }\n\n    public static readonly SampleDiagnostic = {\n        Ok: 0,\n        FaceNotFound: 1,\n        RightEyeNotFound: 2,\n        LeftEyeNotFound: 3,\n        EyesNotFound: 4,\n        FaceTooFar: 5,\n        FaceTooClose: 6,\n        TooCloseToWindowSide: 7,\n        AngleExceeded: 8,\n        QualityCheckFailed: 9,\n        NotRated: 10\n    }\n\n    public static readonly FinalDiagnostic = {\n        InsufficientValidSamples: 0,\n        TemplateCreationInProgress: 1,\n        TemplateCreated: 2\n    }\n\n    public static readonly LivenessDiagnostic = {\n        NotRated: 0,\n        PhotoDetected: 1,\n        LivenessDetected: 2,\n        Unsuccess: 3,\n        UnsuccessLowPerformance: 4,\n        UnsuccessGlasses: 5,\n        UnsuccessLight: 6,\n        UnsuccessNoMovement: 7,\n        UnsuccessWrongDirection: 8,\n        UnsuccessTooFar: 9\n    }\n\n    /**\n     * Formato de salida de la informaciÃ³n de template generada por el widget.\n     */\n    public static readonly TemplateFormat = {\n        ByteArray: 0,\n        Base64: 1\n    }\n\n    /**\n     * Formato de salida de la grabaciÃ³n del video de sesiÃ³n del usuario. Tipo de proceso utilizado para la generaciÃ³n del video.\n     */\n    public static readonly RecorderType = {\n        Gif: 0,\n        Remote: 1\n    }\n\n    /**\n     * Tipo de cÃ¡mara a utilizar para la captura del selfie.\n     */\n    public static readonly CameraType = {\n        Front: 0,\n        Back: 1\n    }\n\n    /**\n     * Tipo de acciÃ³n que se produce en la interacciÃ³n del usuario con el widget.\n     */\n    public static readonly TrackStatus = {\n        ChangeState: 0,\n        Tap: 1\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { FacePhiSelphiComponent } from \"./components/facephi-selphi/facephi-selphi.component\";\n\n\n@NgModule({\n    declarations: [\n        FacePhiSelphiComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FacePhiSelphiComponent\n    ]\n})\nexport class FacePhiSelphiModule {}\n"]}