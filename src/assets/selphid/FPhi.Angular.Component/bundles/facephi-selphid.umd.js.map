{"version":3,"file":"facephi-selphid.umd.js.map","sources":["ng://facephi-selphid/lib/services/helpers/rxjs-helper.ts","ng://facephi-selphid/lib/services/fphi-selphid-widget.service.ts","ng://facephi-selphid/lib/models/facephi-selphid-configuration.ts","ng://facephi-selphid/lib/components/facephi-selphid/facephi-selphid.component.ts","ng://facephi-selphid/lib/models/facephi-selphid-constants.ts","ng://facephi-selphid/lib/facephi-selphid.module.ts"],"sourcesContent":["import { timer } from \"rxjs/index\";\n\nexport class RxjsHelper {\n\n    /**\n     * Encapsula una rutina de chequeo de una condiciÃ³n hasta que Ã©sta se cumpla.\n     * @param pollTime Intervalo de chequeo (en ms).\n     * @param evalFunc FunciÃ³n para evaluar la condiciÃ³n deseada.\n     * @param successFunc FunciÃ³n a invocar cuando la condiciÃ³n se cumpla.\n     * @param delayTime Tiempo de retardo para iniciar el proceso de chequeo. Por defecto 0ms.\n     */\n    public static poll(pollTime: number,\n                       evalFunc: any,\n                       successFunc: any,\n                       delayTime: number = 0) {\n        const subscription = timer(delayTime, pollTime)\n            .subscribe(\n                () => {\n                    if (!evalFunc())\n                        return;\n\n                    subscription.unsubscribe();\n                    successFunc();\n                }\n            );\n    }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { Renderer2, RendererFactory2 } from \"@angular/core\";\nimport { DOCUMENT } from \"@angular/common\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { RxjsHelper } from \"./helpers/rxjs-helper\";\n\nimport { FPhiSelphIdConfiguration } from \"../models/facephi-selphid-configuration\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FPhiSelphIdWidgetService {\n\n    // #region \"Atributos\"\n\n    private static readonly licenseCheckUrl: string = \"https://ecertic.idcapture.es/auth\";\n\n    private _renderer: Renderer2;\n\n    private _assetsBasePath: string;\n    private _fPhiWidgetConfiguration: FPhiSelphIdConfiguration;\n    private _fPhiWidget: any;\n\n    // #endregion\n\n    // #region \"Propiedades\"\n\n    private get fPhiSelphIdNamespace() { return window[\"FPhi\"] && window[\"FPhi\"].SelphID ? window[\"FPhi\"].SelphID : undefined; }\n\n    private set fPhiSelphIdNamespace(value: any) {\n        if (window[\"FPhi\"])\n            window[\"FPhi\"].SelphID = value;\n    }\n\n    private get fPhiWidgetScriptPath(): string { return `${this._assetsBasePath}/FPhi.Widget.wasm.js`; }\n\n    // #endregion\n\n    // #region \"Constructores\"\n\n    constructor(\n        @Inject(DOCUMENT) private document: any,\n        private rendererFactory: RendererFactory2,\n        private http: HttpClient\n    ) {\n        this._renderer = this.rendererFactory.createRenderer(null, null);\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos pÃºblicos\"\n\n    /**\n     * Realiza la carga dinÃ¡mica del recurso javascript del widget web.\n     * @param basePath Ruta base de la carpeta de los ficheros del widget.\n     */\n    public loadControl(basePath: string): Observable<FPhiSelphIdWidgetService> {\n        //console.log(`>>>> FPhiSelphIdWidgetService :: loadControl --> basePath: ${basePath}`);\n        this._assetsBasePath = basePath;\n\n        const fPhiWidgetScript = this._renderer.createElement(\"script\");\n        this._renderer.setAttribute(fPhiWidgetScript, \"src\", this.fPhiWidgetScriptPath);\n        this._renderer.setAttribute(fPhiWidgetScript, \"type\", \"text/javascript\");\n        this._renderer.appendChild(this.document.body, fPhiWidgetScript);\n\n        return new Observable<FPhiSelphIdWidgetService>(subscriber => {\n            RxjsHelper.poll(5,\n                () => this.fPhiSelphIdNamespace !== null && this.fPhiSelphIdNamespace !== undefined && this.fPhiSelphIdNamespace.Widget !== null && this.fPhiSelphIdNamespace.Widget !== undefined,\n                () => subscriber.next(this)\n            );\n        });\n    }\n\n    /**\n     * Elimina los recursos javascript del widget incluidos en el DOM de la pÃ¡gina.\n     */\n    public removeControl(): FPhiSelphIdWidgetService {\n        if (!this._assetsBasePath)\n            return this;\n\n        //console.warn(`>>>> FPhiSelphIdWidgetService :: removeControl(\"${this._assetsBasePath}\")`);\n        delete this._fPhiWidget;\n        delete this._fPhiWidgetConfiguration;\n        delete this.fPhiSelphIdNamespace;\n\n        this._fPhiWidget = undefined;\n        this._fPhiWidgetConfiguration = undefined;\n        this.fPhiSelphIdNamespace = undefined;\n\n        this.document\n            .querySelectorAll(`script[src*=\"${this._assetsBasePath}\"]`)\n            .forEach(element => { element.parentNode.removeChild(element); });\n\n        this.document\n            .querySelectorAll(\"style#FPhi_Widget_style\")\n            .forEach(element => { element.parentNode.removeChild(element); });\n\n        //console.warn(`>>>> FPhiSelphIdWidgetService :: Control removed`);\n\n        return this;\n    }\n\n    /**\n     * Crea una instancia del widget web nativo con los datos de configuraciÃ³n indicados.\n     * @param config Datos de configuraciÃ³n del widget.\n     */\n    public createUserControl(config: FPhiSelphIdConfiguration): FPhiSelphIdWidgetService {\n        //console.warn(\">>>> FPhiSelphIdWidgetService :: createUserControl\", config, config.getNativeConfiguration());\n        //console.log(`widgetContainer.clientWidth: ${config.widgetContainer.clientWidth}`);\n        //console.log(`widgetContainer.clientHeight: ${config.widgetContainer.clientHeight}`);\n        //console.log(`widgetContainer.offsetWidth: ${config.widgetContainer.offsetWidth}`);\n        //console.log(`widgetContainer.offsetHeight: ${config.widgetContainer.offsetHeight}`);\n        //console.log(`widgetContainer.computedStyleWidth: ${window.getComputedStyle(config.widgetContainer).width}`);\n        //console.log(`widgetContainer.computedStyleHeight: ${window.getComputedStyle(config.widgetContainer).height}`);\n\n        this._fPhiWidgetConfiguration = config;\n        this._fPhiWidget = new this.fPhiSelphIdNamespace.Widget(config.getNativeConfiguration());\n        //console.log(this._fPhiSelphIdWidget);\n\n        if (this._fPhiWidgetConfiguration.debugMode !== null && this._fPhiWidgetConfiguration.debugMode !== undefined)\n            this._fPhiWidget.debug = this._fPhiWidgetConfiguration.debugMode;\n\n        //console.log(this._fPhiSelphIdWidget);\n        return this;\n    }\n\n    /**\n     * Inicia el widget.\n     */\n    public startUserControl(): FPhiSelphIdWidgetService {\n        if (this._fPhiWidget) {\n            // console.warn(\">>>> FPhiSelphIdWidgetService :: startUserControl\");\n            this._fPhiWidget.Start();\n        }\n\n        return this;\n    }\n\n    /**\n     * Detiene la ejecuciÃ³n del widget.\n     */\n    public stopUserControl(): FPhiSelphIdWidgetService {\n        if (this._fPhiWidget) {\n            // console.warn(\">>>> FPhiSelphIdWidgetService :: stopUserControl\");\n            this._fPhiWidget.Stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * Verifica que el entorno de ejecuciÃ³n actual estÃ¡ correctamente licenciado para el uso de las capacidades de detecciÃ³n del widget.\n     */\n    public isWidgetLicensed(): Observable<boolean> {\n        return this.http.get<any>(FPhiSelphIdWidgetService.licenseCheckUrl, { observe: \"response\" })\n            .pipe(map<HttpResponse<any>, boolean>((response: HttpResponse<any>) => response.status !== 403))\n    }\n\n    // #endregion\n}\n","import { FPhiSelphIdConstants } from \"./facephi-selphid-constants\";\n\n/**\n * Modelo con la informaciÃ³n de configuraciÃ³n del widget Selphi.\n */\nexport class FPhiSelphIdConfiguration {\n\n    // #region \"Propiedades\"\n\n    /**\n     * Referencia al elemento del DOM que actÃºa como contenedor del widget web.\n     */\n    public widgetContainer: any;\n\n    /**\n     * Idioma en que se mostrarÃ¡ la informaciÃ³n del widget.\n     */\n    public language: string;\n\n    /**\n     * Lista de densidades de pÃ­xeles en pantalla soportadas por el widget, de cara a mostrar las imÃ¡genes de recurso adecuadas a la pantalla actual.\n     */\n    public dpiList: Array<number>;\n\n    /**\n     * Modo de captura de documento. Controla el flujo de ejecuciÃ³n del widget.\n     */\n    public captureMode: number;\n\n    /**\n     * En caso de estar habilitado, el widget mostrarÃ¡ el documento capturado y solicitarÃ¡ confirmaciÃ³n al usuario.\n     */\n    public previewCapture: boolean;\n\n    /**\n     * Dimensiones fÃ­sicas (en mm) del documento a capturar.\n     */\n    public documentDimensions: FPhiSelphIdDocumentDimensions;\n\n    /**\n     * Umbral de tolerancia para dar por vÃ¡lida una captura de documento.\n     */\n    public qualityThreshold: number;\n\n    /**\n     * Factor de escalado sobre el Ã¡rea de recorte de la imagen del documento. La imagen devuelta se escala de acuerdo con este valor.\n     * Solamente se permiten valores mayores o iguales a 1.0.\n     */\n    public cropFactor: number;\n\n    /**\n     * En caso de estar habilitado, el widget se mostrarÃ¡ siempre en disposiciÃ³n horizontal, rotÃ¡ndose 90 grados en disposiciones verticales.\n     */\n    public forceLandscape: boolean;\n\n    /**\n     * Activa el modo de visualizaciÃ³n del drawer en pantallas de alta densidad.\n     */\n    public canvasHD: boolean;\n\n    /**\n     * Muestra un mensaje de advertencia de uso inicial tras la carga del widget.\n     */\n    public initialTip: boolean;\n\n    /**\n     * ResoluciÃ³n horizontal preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    public cameraWidth: number;\n\n    /**\n     * ResoluciÃ³n vertical preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    public cameraHeight: number;\n    \n    /**\n     * Identificador de la cÃ¡mara a utilizar para la realizaciÃ³n de la captura (si no se especifica, el widget seleccionarÃ¡ la cÃ¡mara trasera expuesta por defecto por el dispositivo).\n     */\n    public cameraId: string;\n\n    /**\n     * Tiempo disponible para la captura de una imagen de documento antes de emitirse un timeout (por defecto 10s). \n     * Valores <= 0.0 anulan la limitaciÃ³n de tiempo de captura.\n     */\n    public captureTimeout: number;\n\n    /**\n     * NÃºmero mÃ¡ximo de reintentos para obtener una captura vÃ¡lida de imagen de documento.\n     * Valores <= 0 establecen un nÃºmero infinito de reintentos.\n     */\n    public captureRetries: number;\n    \n    /**\n     * Sensibilidad de captura durante la detecciÃ³n de bordes del widget.\n     */\n    public captureSensibility: number;\n\n    /**\n     * Formato de las imÃ¡genes capturadas por el widget (MIME type).\n     */\n    public imageFormat: string;\n\n    /**\n     * Factor de calidad de las imÃ¡genes devueltas (rango 0.0 a 1.0). Ãnicamente aplicable cuando el formato de imagen se ha especificado como \"image/jpeg\".\n     */\n    public imageQuality: number;\n\n    /**\n     * Activa el modo de depuraciÃ³n del widget, en el que se mostrarÃ¡n mensajes informativos en la consola del navegador.\n     */\n    public debugMode: boolean = false;\n\n    // #endregion\n\n    // #region \"Eventos\"\n\n    /**\n     * Evento lanzado por el widget cuando se ha finalizado el proceso de carga e inicializaciÃ³n, tando del widget, como de los recursos asociados al mismo.\n     */\n    public onModuleLoaded: any;\n\n    /**\n     * Evento lanzado cuando el proceso de extracciÃ³n ha finalizado correctamente. Devuelve el resultado de la captura.\n     */\n    public onExtractionFinished: any;\n\n    /**\n     * Evento lanzado cuando el usuario cancela el proceso de extracciÃ³n.\n     */\n    public onUserCancelled: any;\n\n    /**\n     * Evento lanzado en caso de que se produzca un error interno del widget.\n     */\n    public onExceptionCaptured: any;\n\n    /**\n     * Evento lanzado si el proceso de captura excede el tiempo mÃ¡ximo disponible.\n     */\n    public onExtractionTimeout: any;\n\n    /**\n     * Evento lanzado tras cualquier acciÃ³n realizada por el usuario sobre la interfaz grÃ¡fica del widget o ante cualquier cambio de estado\n     * durante el proceso de captura.\n     */\n    public onTrackStatus: any;\n\n    // #endregion\n\n    // #region \"MÃ©todos pÃºblicos\"\n\n    /**\n     * Genera una instancia de \"FPhi.SelphID.ConfigurationManager\" con los datos de configuraciÃ³n de la instancia actual para inicializar el widget.\n     */\n    public getNativeConfiguration() {\n        const configurationManager = new window[\"FPhi\"].SelphID.ConfigurationManager();\n\n        // Propiedades de configuraciÃ³n\n        this.setNativeConfiguration(this.widgetContainer, configurationManager.setContainer, configurationManager);\n        this.setNativeConfiguration(this.language, configurationManager.setLanguage, configurationManager);\n        this.setNativeConfiguration(this.dpiList, configurationManager.setDpiList, configurationManager);\n        \n        this.setNativeConfiguration(this.captureMode, configurationManager.setMode, configurationManager);\n        this.setNativeConfiguration(this.previewCapture, configurationManager.setPreview, configurationManager);\n        this.setNativeConfiguration(this.documentDimensions, configurationManager.setDocumentDimensions, configurationManager);\n        \n        this.setNativeConfiguration(this.qualityThreshold, configurationManager.setQualityThreshold, configurationManager);\n        this.setNativeConfiguration(this.cropFactor, configurationManager.setCropFactor, configurationManager);\n        this.setNativeConfiguration(this.forceLandscape, configurationManager.setForceLandscape, configurationManager);\n        this.setNativeConfiguration(this.canvasHD, configurationManager.setCanvasHD, configurationManager);\n        this.setNativeConfiguration(this.initialTip, configurationManager.setInitialTip, configurationManager);\n        \n        this.setNativeConfiguration(this.cameraWidth, configurationManager.setCameraWidth, configurationManager);\n        this.setNativeConfiguration(this.cameraHeight, configurationManager.setCameraHeight, configurationManager);\n        this.setNativeConfiguration(this.cameraId, configurationManager.setCameraId, configurationManager);\n        \n        this.setNativeConfiguration(this.captureTimeout, configurationManager.setCaptureTimeout, configurationManager);\n        this.setNativeConfiguration(this.captureRetries, configurationManager.setCaptureRetries, configurationManager);\n        this.setNativeConfiguration(this.captureSensibility, configurationManager.setCaptureSensibility, configurationManager);\n        \n        this.setNativeConfiguration(this.imageFormat, configurationManager.setImageFormat, configurationManager);\n        this.setNativeConfiguration(this.imageQuality, configurationManager.setImageQuality, configurationManager);\n\n        // Eventos\n        this.setNativeConfiguration(this.onModuleLoaded, configurationManager.setOnModuleLoaded, configurationManager);\n        this.setNativeConfiguration(this.onExtractionFinished, configurationManager.setOnExtractionFinish, configurationManager);\n        this.setNativeConfiguration(this.onUserCancelled, configurationManager.setOnUserCancel, configurationManager);\n        this.setNativeConfiguration(this.onExceptionCaptured, configurationManager.setOnExceptionCaptured, configurationManager);\n        this.setNativeConfiguration(this.onExtractionTimeout, configurationManager.setOnExtractionTimeout, configurationManager);\n        this.setNativeConfiguration(this.onTrackStatus, configurationManager.setOnTrackStatus, configurationManager);\n\n        return configurationManager;\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos privados\"\n\n    private setNativeConfiguration(property, configurationSetterFunc, context: any = null) {\n        if (property === null || property === undefined)\n            return;\n\n        const setterFunc = context ? configurationSetterFunc.bind(context) : configurationSetterFunc;\n        setterFunc(property);\n    }\n\n    // #endregion\n}\n\n/**\n * Datos de dimensiones del documento capturado por el widget.\n */\nexport class FPhiSelphIdDocumentDimensions {\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n}\n","import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding\n} from \"@angular/core\";\n\nimport { FPhiSelphIdWidgetService } from \"../../services/fphi-selphid-widget.service\";\nimport { FPhiSelphIdConfiguration, FPhiSelphIdDocumentDimensions } from \"../../models/facephi-selphid-configuration\";\n\n@Component({\n    selector: \"facephi-selphid\",\n    templateUrl: \"./facephi-selphid.component.html\",\n    styleUrls: [\"./facephi-selphid.component.scss\"]\n})\nexport class FacePhiSelphIdComponent implements OnInit, OnDestroy {\n\n    // #region \"Atributos\"\n\n    private _cssClass: string = \"\";\n    private _widgetConfiguration: FPhiSelphIdConfiguration = new FPhiSelphIdConfiguration();\n\n    // #endregion\n\n    // #region \"Propiedades\"\n\n    @Input(\"class\")\n    @HostBinding(\"class\")\n    public get cssClass(): string {\n        return this._cssClass;\n    }\n\n    public set cssClass(value: string) {\n        if (value)\n            this._cssClass += ` ${value}`;\n    }\n\n    /**\n     * Anchura del componente.\n     */\n    @Input(\"width\")\n    public componentWidth: string;\n\n    public get widgetWidth(): string {\n        return this.componentWidth\n            ? typeof this.componentWidth === \"string\" && this.componentWidth.endsWith(\"%\")\n                ? this.componentWidth\n                : `${parseFloat(this.componentWidth)}px`\n            : \"100%\";\n    }\n\n    /**\n     * Altura del componente.\n     */\n    @Input(\"height\")\n    public componentHeight: string;\n\n    public get widgetHeight(): string {\n        return this.componentHeight\n            ? typeof this.componentWidth === \"string\" && this.componentHeight.endsWith(\"%\")\n                ? this.componentHeight\n                : `${parseFloat(this.componentHeight)}px`\n            : \"100%\";\n    }\n\n    /**\n     * Referencia interna al contenedor sobre el que se generarÃ¡ el widget web.\n     */\n    @ViewChild(\"widgetContainer\")\n    public readonly widgetContainer: ElementRef;\n\n    /**\n     * Clases CSS aplicadas sobre el contenedor del widget web.\n     */\n    @Input()\n    public containerCssClass: string;\n\n    // #region \"ConfiguraciÃ³n\"\n\n    /**\n     * Ruta en la que estÃ¡n localizados los recursos javascript nativos del widget web.\n     */\n    @Input()\n    public widgetLibPath = \"assets/lib/facephi/selphid\";\n\n    /**\n     * Flag para indicar si queremos que sea el componente el encargado de cargar e inicializar todos los recursos javascript del widget y borrarlos en su evento 'onDestroy'.\n     */\n    @Input()\n    public autoLoadLibResources: boolean = true;\n\n    /**\n     * Idioma en que se mostrarÃ¡ la informaciÃ³n del widget.\n     */\n    @Input()\n    public set language(value: string) {\n        this._widgetConfiguration.language = value;\n    }\n\n    public get language(): string { return this._widgetConfiguration.language; }\n\n    /**\n     * Lista de densidades de pÃ­xeles en pantalla soportadas por el widget, de cara a mostrar las imÃ¡genes de recurso adecuadas a la pantalla actual.\n     */\n    @Input()\n    public set dpiList(value: Array<number>) {\n        this._widgetConfiguration.dpiList = value;\n    }\n\n    public get dpiList(): Array<number> { return this._widgetConfiguration.dpiList; }\n\n    /**\n     * Modo de captura de documento. Controla el flujo de ejecuciÃ³n del widget.\n     */\n    @Input()\n    public set captureMode(value: number) {\n        this._widgetConfiguration.captureMode = value;\n    }\n\n    public get captureMode(): number { return this._widgetConfiguration.captureMode; }\n\n    /**\n     * En caso de estar habilitado, el widget mostrarÃ¡ el documento capturado y solicitarÃ¡ confirmaciÃ³n al usuario.\n     */\n    @Input()\n    public set previewCapture(value: boolean) {\n        this._widgetConfiguration.previewCapture = value;\n    }\n\n    public get previewCapture(): boolean { return this._widgetConfiguration.previewCapture; }\n\n    /**\n     * Dimensiones fÃ­sicas (en mm) del documento a capturar.\n     */\n    @Input()\n    public set documentDimensions(value: FPhiSelphIdDocumentDimensions) {\n        this._widgetConfiguration.documentDimensions = value;\n    }\n\n    public get documentDimensions(): FPhiSelphIdDocumentDimensions { return this._widgetConfiguration.documentDimensions; }\n\n    /**\n     * Umbral de tolerancia para dar por vÃ¡lida una captura de documento.\n     */\n    @Input()\n    public set qualityThreshold(value: number) {\n        this._widgetConfiguration.qualityThreshold = value;\n    }\n\n    public get qualityThreshold(): number { return this._widgetConfiguration.qualityThreshold; }\n\n    /**\n     * Factor de escalado sobre el Ã¡rea de recorte de la imagen del documento. La imagen devuelta se escala de acuerdo con este valor.\n     * Solamente se permiten valores mayores o iguales a 1.0.\n     */\n    @Input()\n    public set cropFactor(value: number) {\n        this._widgetConfiguration.cropFactor = value;\n    }\n\n    public get cropFactor(): number { return this._widgetConfiguration.cropFactor; }\n\n    /**\n     * En caso de estar habilitado, el widget se mostrarÃ¡ siempre en disposiciÃ³n horizontal, rotÃ¡ndose 90 grados en disposiciones verticales.\n     */\n    @Input()\n    public set forceLandscape(value: boolean) {\n        this._widgetConfiguration.forceLandscape = value;\n    }\n\n    public get forceLandscape(): boolean { return this._widgetConfiguration.forceLandscape; }\n\n    /**\n     * Activa el modo de visualizaciÃ³n del drawer en pantallas de alta densidad.\n     */\n    @Input()\n    public set canvasHD(value: boolean) {\n        this._widgetConfiguration.canvasHD = value;\n    }\n\n    public get canvasHD(): boolean { return this._widgetConfiguration.canvasHD; }\n\n    /**\n     * Muestra un mensaje de advertencia de uso inicial tras la carga del widget.\n     */\n    @Input()\n    public set initialTip(value: boolean) {\n        this._widgetConfiguration.initialTip = value;\n    }\n\n    public get initialTip(): boolean { return this._widgetConfiguration.initialTip; }\n\n    /**\n     * ResoluciÃ³n horizontal preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    @Input()\n    public set cameraWidth(value: number) {\n        this._widgetConfiguration.cameraWidth = value;\n    }\n\n    public get cameraWidth(): number { return this._widgetConfiguration.cameraWidth; }\n\n    /**\n     * ResoluciÃ³n vertical preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    @Input()\n    public set cameraHeight(value: number) {\n        this._widgetConfiguration.cameraHeight = value;\n    }\n\n    public get cameraHeight(): number { return this._widgetConfiguration.cameraHeight; }\n\n    /**\n     * Identificador de la cÃ¡mara a utilizar para la realizaciÃ³n de la captura (si no se especifica, el widget seleccionarÃ¡ la cÃ¡mara trasera expuesta por defecto por el dispositivo).\n     */\n    @Input()\n    public set cameraId(value: string) {\n        this._widgetConfiguration.cameraId = value;\n    }\n\n    public get cameraId(): string { return this._widgetConfiguration.cameraId; }\n\n    /**\n     * Tiempo disponible para la captura de una imagen de documento antes de emitirse un timeout (por defecto 10s). \n     * Valores <= 0.0 anulan la limitaciÃ³n de tiempo de captura.\n     */\n    @Input()\n    public set captureTimeout(value: number) {\n        this._widgetConfiguration.captureTimeout = value;\n    }\n\n    public get captureTimeout(): number { return this._widgetConfiguration.captureTimeout; }\n\n    /**\n     * NÃºmero mÃ¡ximo de reintentos para obtener una captura vÃ¡lida de imagen de documento.\n     * Valores <= 0 establecen un nÃºmero infinito de reintentos.\n     */\n    @Input()\n    public set captureRetries(value: number) {\n        this._widgetConfiguration.captureRetries = value;\n    }\n\n    public get captureRetries(): number { return this._widgetConfiguration.captureRetries; }\n\n    \n    /**\n     * Sensibilidad de captura durante la detecciÃ³n de bordes del widget.\n     */\n    @Input()\n    public set captureSensibility(value: number) {\n        this._widgetConfiguration.captureSensibility = value;\n    }\n\n    public get captureSensibility(): number { return this._widgetConfiguration.captureSensibility; }\n\n    /**\n     * Formato de las imÃ¡genes capturadas por el widget (MIME type).\n     */\n    @Input()\n    public set imageFormat(value: string) {\n        this._widgetConfiguration.imageFormat = value;\n    }\n\n    public get imageFormat(): string { return this._widgetConfiguration.imageFormat; }\n\n    /**\n     * Factor de calidad de las imÃ¡genes devueltas (rango 0.0 a 1.0). Ãnicamente aplicable cuando el formato de imagen se ha especificado como \"image/jpeg\".\n     */\n    @Input()\n    public set imageQuality(value: number) {\n        this._widgetConfiguration.imageQuality = value;\n    }\n\n    public get imageQuality(): number { return this._widgetConfiguration.imageQuality; }\n\n    /**\n     * Activa el modo de depuraciÃ³n del widget, en el que se mostrarÃ¡n mensajes informativos en la consola del navegador.\n     */\n    @Input()\n    public set debugMode(value: boolean) {\n        this._widgetConfiguration.debugMode = value;\n    }\n\n    public get debugMode(): boolean { return this._widgetConfiguration.debugMode; }\n\n    // #endregion\n\n    // #region \"Eventos\"\n\n    /**\n     * Evento lanzado cuando los recursos del widget se han cargado correctamente.\n     */\n    @Output()\n    public onComponentLoaded = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado por el widget cuando se ha finalizado el proceso de carga e inicializaciÃ³n, tando del widget, como de los recursos asociados al mismo.\n     */\n    @Output()\n    public onModuleLoaded = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de extracciÃ³n ha finalizado correctamente. Devuelve el resultado de la captura.\n     */\n    @Output()\n    public onExtractionFinished = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el usuario cancela el proceso de extracciÃ³n.\n     */\n    @Output()\n    public onUserCancelled = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado en caso de que se produzca un error interno del widget.\n     */\n    @Output()\n    public onExceptionCaptured = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado si el proceso de captura excede el tiempo mÃ¡ximo disponible.\n     */\n    @Output()\n    public onExtractionTimeout = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado tras cualquier acciÃ³n realizada por el usuario sobre la interfaz grÃ¡fica del widget o ante cualquier cambio de estado\n     * durante el proceso de captura.\n     */\n    @Output()\n    public onTrackStatus = new EventEmitter<any>();\n\n    // #endregion\n\n    // #endregion\n\n    // #region \"Constructores\"\n\n    constructor(\n        private widgetService: FPhiSelphIdWidgetService\n    ) { }\n\n    ngOnInit() {\n        //console.warn(`>>>> [facephi-selphid] ngOnInit { autoLoadLibResources: ${this.autoLoadLibResources} }`, this.widgetContainer.nativeElement);\n        //console.log(`widgetContainer.offsetWidth: ${(this.widgetContainer.nativeElement as any).offsetWidth}`);\n        //console.log(`widgetContainer.offsetHeight: ${(this.widgetContainer.nativeElement as any).offsetHeight}`);\n        this._widgetConfiguration.widgetContainer = this.widgetContainer.nativeElement;\n        this.setupEvents();\n\n        const widgetInitFunc = () => {\n            //console.warn(\">>>> [facephi-selphid]  CONTROL LOADED!!\");\n            this.onComponentLoaded.emit();\n\n            this.widgetService\n                .createUserControl(this._widgetConfiguration)\n                .startUserControl();\n        };\n\n        if (this.autoLoadLibResources) {\n            this.widgetService\n                .loadControl(this.widgetLibPath)\n                .subscribe(widgetInitFunc);\n        } else\n            widgetInitFunc();\n    }\n\n    ngOnDestroy() {\n        if (this.autoLoadLibResources) {\n            this.widgetService\n                .stopUserControl()\n                .removeControl();\n        }\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos privados\"\n\n    private setupEvents(): FacePhiSelphIdComponent {\n        this._widgetConfiguration.onModuleLoaded = eventData => { this.onModuleLoaded.emit(eventData); };\n        this._widgetConfiguration.onExtractionFinished = extractionResult => { this.onExtractionFinished.emit(extractionResult); };\n        this._widgetConfiguration.onUserCancelled = () => { this.onUserCancelled.emit(); };\n        this._widgetConfiguration.onExceptionCaptured = exceptionResult => { this.onExceptionCaptured.emit(exceptionResult); };\n        this._widgetConfiguration.onExtractionTimeout = () => { this.onExtractionTimeout.emit(); };\n        this._widgetConfiguration.onTrackStatus = eventData => { this.onTrackStatus.emit(eventData); };\n\n        return this;\n    }\n\n    // #endregion\n\n}\n","export class FPhiSelphIdConstants {\n    /**\n     * Modo de funcionamiento del widget a la hora de realizar la captura del documento.\n     */\n    public static readonly CaptureMode = {\n        /**\n         * Captura Ãºnicamente el frente del documento.\n         */\n        Front: 0,\n\n        /**\n         * Captura Ãºnicamente el dorso del documento.\n         */\n        Back: 1,\n\n        /**\n         * Realiza una captura de ambas partes del documento.\n         */\n        Full: 2\n    }\n\n    /**\n     * Tipo de excepciÃ³n producida durante la ejecuciÃ³n del widget.\n     */\n    public static readonly ExceptionType = {\n        CameraError: 0,\n        ExtractorError: 1,\n        ControlNotInitializedError: 2,\n        ImageCropResizeError: 3,\n        UnexpectedCaptureError: 4\n    }\n\n    /**\n     * Niveles de sensibilidad de captura en las capacidades de detecciÃ³n de bordes del widget.\n     */\n    public static readonly CaptureSensibility = {\n        Low: 0,\n        Normal: 1,\n        High: 2,\n        Auto: 3\n    }\n\n    /**\n     * Tipo de acciÃ³n que se produce en la interacciÃ³n del usuario con el widget.\n     */\n    public static readonly TrackStatus = {\n        ChangeState: 0,\n        Tap: 1\n    }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { FacePhiSelphIdComponent } from \"./components/facephi-selphid/facephi-selphid.component\";\n\n\n@NgModule({\n    declarations: [\n        FacePhiSelphIdComponent\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    exports: [\n        FacePhiSelphIdComponent\n    ]\n})\nexport class FacePhiSelphIdModule {}\n"],"names":["timer","Observable","map","Injectable","Inject","DOCUMENT","RendererFactory2","HttpClient","EventEmitter","Component","Input","HostBinding","ViewChild","Output","NgModule","CommonModule","HttpClientModule"],"mappings":"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"}
