{"version":3,"file":"facephi-selphi.umd.js.map","sources":["ng://facephi-selphi/lib/models/facephi-selphi-configuration.ts","ng://facephi-selphi/lib/services/helpers/rxjs-helper.ts","ng://facephi-selphi/lib/services/fphi-selphi-widget.service.ts","ng://facephi-selphi/lib/components/facephi-selphi/facephi-selphi.component.ts","ng://facephi-selphi/lib/models/facephi-selphi-constants.ts","ng://facephi-selphi/lib/facephi-selphi.module.ts"],"sourcesContent":["import { FPhiSelphiConstants } from \"./facephi-selphi-constants\";\n\n/**\n * Modelo con la informaciÃ³n de configuraciÃ³n del widget Selphi.\n */\nexport class FPhiSelphiConfiguration {\n\n    // #region \"Propiedades\"\n\n    /**\n     * Referencia al elemento del DOM que actÃºa como contenedor del widget web.\n     */\n    public widgetContainer: any;\n\n    /**\n     * Ruta donde estÃ¡ ubicado el fichero widget.xml y el resto de recursos personalizables del widget.\n     */\n    public resourcesPath: any;\n\n    /**\n     * Ruta donde estÃ¡ ubicado el fichero graph.xml.\n     */\n    public graphPath: any;\n\n    /**\n     * Idioma en que se mostrarÃ¡ la informaciÃ³n del widget.\n     */\n    public language: string;\n\n    /**\n     * Lista de densidades de pÃ­xeles en pantalla soportadas por el widget, de cara a mostrar las imÃ¡genes de recurso adecuadas a la pantalla actual.\n     */\n    public dpiList: Array<number>;\n\n    /**\n     * ResoluciÃ³n horizontal preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    public cameraWidth: number;\n\n    /**\n     * ResoluciÃ³n vertical preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    public cameraHeight: number;\n\n    /**\n     * RotaciÃ³n de la cÃ¡mara.\n     */\n    public cameraRotation: any;\n\n    /**\n     * Selector de tipo de cÃ¡mara a utilizar para realizar la captura (frontal o trasera).\n     */\n    public cameraType: any;\n\n    /**\n     * Indica si el tutorial estÃ¡ disponible en el widget.\n     */\n    public tutorial: boolean;\n\n    /**\n     * Modo de extracciÃ³n o flujo de ejecuciÃ³n utilizado por el widget.\n     */\n    public extractionMode: any;\n\n    /**\n     * Modos de verificaciÃ³n de prueba de vida utilizado por el widget.\n     */\n    public livenessMode: any;\n\n    /**\n     * \n     */\n    public livenessPrecision: number;\n\n    /**\n     * \n     */\n    public livenessMoveInitialError: number;\n\n    /**\n     * \n     */\n    public livenessMoveInfoTime: number;\n\n    /**\n     * Indica si el widget permite la interacciÃ³n con el usuario.\n     */\n    public interactible: boolean;\n\n    /**\n     * Tiempo de registro en segundos.\n     */\n    public registerTime: number;\n\n    /**\n     * Tiempo de autenticaciÃ³n en segundos.\n     */\n    public authenticateTime: number;\n\n    /**\n     * Formato de las imÃ¡genes capturadas por el widget (MIME type).\n     */\n    public imageFormat: string;\n\n    /**\n     * Factor de calidad de las imÃ¡genes devueltas (rango 0.0 a 1.0). Ãnicamente aplicable cuando el formato de imagen se ha especificado como \"image/jpeg\".\n     */\n    public imageQuality: number;\n\n    /**\n     * \n     */\n    public logImages: boolean;\n\n    /**\n     * Factor de recorte de las imÃ¡genes devueltas por el widget.\n     */\n    public cropFactor: number;\n\n    /**\n     * Indica si el widget debe recortar las imÃ¡genes capturadas, o no.\n     */\n    public cropImage: boolean;\n\n    /**\n     * Formato de salida de la informaciÃ³n de template generada por el widget.\n     */\n    public templateFormat: number;\n\n    /**\n     * Activa la fase de estabilizaciÃ³n previa a la captura. Por defecto, la estabilizaciÃ³n estarÃ¡ desactivada.\n     * En caso de haber seleccionado LivenessMode==Move, este parÃ¡metro no se tendrÃ¡ en cuenta y siempre se realizarÃ¡ fase de estabilizado.\n     */\n    public stabilizationStage: boolean;\n\n    /**\n     * Indica si el widget debe grabar la sesiÃ³n del usuario en video.\n     */\n    public videoRecord: boolean;\n\n    /**\n     * Frecuencia de grabaciÃ³n (en frames por segundo).\n     */\n    public videoRecordRate: number;\n\n    /**\n     * Factor de escalado aplicado sobre las capturas realizadas para la generaciÃ³n del video.\n     * Toma valores porcentuales de 0.0 a 1.0 (que equivaldrÃ­a a una escala del 100% de resoluciÃ³n de cÃ¡mara seleccionada).\n     */\n    public videoRecordScale: number;\n\n    /**\n     * Tipo de salida del video generado. Los posibles valores se tomarÃ¡n del enumerado \"FPhi.Selphi.RecordType\".\n     */\n    public videoRecordType: any;\n\n    /**\n     * Activa el modo de depuraciÃ³n del widget, en el que se mostrarÃ¡n mensajes informativos en la consola del navegador.\n     */\n    public debugMode: boolean;\n\n    // #endregion\n\n    // #region \"Eventos\"\n\n    /**\n     * Evento lanzado por el widget cuando se ha finalizado el proceso de carga e inicializaciÃ³n, tando del widget, como de los recursos asociados al mismo.\n     */\n    public onModuleLoaded: any;\n\n    /**\n     * Evento lanzado durante los ciclos de estabilizaciÃ³n de la imagen para la correcta realizaciÃ³n de la captura.\n     * @callback evt {{ detail: FPhiSelphiConstants.SampleDiagnostic }}\n     */\n    public onStabilizing: any;\n\n    /**\n     * Evento lanzado cuando el proceso de extracciÃ³n ha finalizado correctamente. Devuelve el resultado de la captura.\n     * @callback evt {{ template, images, timeStamp, templateRaw, livenessMoveFails, sunGlassesScore, livenessMoveHistory, livenessMoveStabilizedHistory, livenessMoveStabilizedStatus }}\n     */\n    public onExtractionFinish: any;\n\n    /**\n     * Evento lanzado cuando el usuario cancela el proceso de extracciÃ³n.\n     */\n    public onUserCancel: any;\n\n    /**\n     * Evento lanzado en caso de que se produzca un error interno del widget.\n     * @callback evt {{ detail: { message: string, exceptionType: FPhiSelphiConstants.ExceptionType } }}\n     */\n    public onExceptionCaptured: any;\n\n    /**\n     * Evento lanzado cuando el proceso de verificaciÃ³n de autenticidad por prueba de vida falla.\n     * @callback evt {{ detail: { template, images, timeStamp, templateRaw, livenessMoveFails, sunGlassesScore, livenessMoveHistory, livenessMoveStabilizedHistory, livenessMoveStabilizedStatus } }}\n     */\n    public onLivenessError: any;\n\n    /**\n     * Evento lanzado cuando el proceso de verificaciÃ³n de autenticidad por prueba de vida falla y el usuario pulsa el botÃ³n de la pantalla de error mostrada.\n     */\n    public onLivenessErrorButtonClick: any;\n\n    /**\n     * Evento lanzado si el proceso de captura excede el tiempo mÃ¡ximo disponible.\n     * @callback evt {{ detail: { template, images, timeStamp, templateRaw, livenessMoveFails, sunGlassesScore, livenessMoveHistory, livenessMoveStabilizedHistory, livenessMoveStabilizedStatus } }}\n     */\n    public onExtractionTimeout: any;\n\n    /**\n     * Evento lanzado cuando el proceso de captura excede el tiempo mÃ¡ximo disponible y el usuario pulsa el botÃ³n de la pantalla de error mostrada.\n     */\n    public onTimeoutErrorButtonClick: any;\n\n    /**\n     * Evento lanzado tras cualquier acciÃ³n realizada por el usuario sobre la interfaz grÃ¡fica del widget o ante cualquier cambio de estado\n     * durante el proceso de captura.\n     */\n    public onTrackStatus: any;\n\n    // #endregion\n\n    // #region \"MÃ©todos pÃºblicos\"\n\n    /**\n     * Genera una instancia de \"FPhi.Selphi.ConfigurationManager\" con los datos de configuraciÃ³n de la instancia actual para inicializar el widget.\n     */\n    public getNativeConfiguration() {\n        const configurationManager = new window[\"FPhi\"].Selphi.ConfigurationManager();\n\n        // Propiedades de configuraciÃ³n\n        this.setNativeConfiguration(this.widgetContainer, configurationManager.setContainer, configurationManager);\n        this.setNativeConfiguration(this.resourcesPath, configurationManager.setResourcesPath, configurationManager);\n        this.setNativeConfiguration(this.graphPath, configurationManager.setGraphPath, configurationManager);\n        this.setNativeConfiguration(this.language, configurationManager.setLanguage, configurationManager);\n        this.setNativeConfiguration(this.dpiList, configurationManager.setDpiList, configurationManager);\n\n        this.setNativeConfiguration(this.tryParseInt(this.cameraWidth), configurationManager.setCameraWidth, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.cameraHeight), configurationManager.setCameraHeight, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.cameraRotation), configurationManager.setCameraRotation, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.cameraType), configurationManager.setCameraType, configurationManager);\n\n        this.setNativeConfiguration(this.tutorial, configurationManager.setTutorial, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.extractionMode), configurationManager.setMode, configurationManager);\n\n        this.setNativeConfiguration(this.tryParseInt(this.livenessMode), configurationManager.setLivenessMode, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.livenessPrecision), configurationManager.setLivenessPrecision, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.livenessMoveInitialError), configurationManager.setLivenessMoveInitialError, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.livenessMoveInfoTime), configurationManager.setLivenessMoveInfoTime, configurationManager);\n\n        this.setNativeConfiguration(this.interactible, configurationManager.setInteractible, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.registerTime), configurationManager.setRegisterTime, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.authenticateTime), configurationManager.setAuthenticateTime, configurationManager);\n\n        this.setNativeConfiguration(this.imageFormat, configurationManager.setImageFormat, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.imageQuality), configurationManager.setImageQuality, configurationManager);\n        this.setNativeConfiguration(this.logImages, configurationManager.setLogImages, configurationManager);\n\n        this.setNativeConfiguration(this.tryParseFloat(this.cropFactor), configurationManager.setCropFactor, configurationManager);\n        this.setNativeConfiguration(this.cropImage, configurationManager.setCropImage, configurationManager);\n\n        this.setNativeConfiguration(this.tryParseInt(this.templateFormat), configurationManager.setTemplateFormat, configurationManager);\n        this.setNativeConfiguration(this.stabilizationStage, configurationManager.setStabilizationStage, configurationManager);\n\n        this.setNativeConfiguration(this.videoRecord, configurationManager.setVideoRecord, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.videoRecordRate), configurationManager.setVideoRecordRate, configurationManager);\n        this.setNativeConfiguration(this.tryParseFloat(this.videoRecordScale), configurationManager.setVideoRecordScale, configurationManager);\n        this.setNativeConfiguration(this.tryParseInt(this.videoRecordType), configurationManager.setVideoRecordType, configurationManager);\n\n        // Eventos\n        this.setNativeConfiguration(this.onModuleLoaded, configurationManager.setOnModuleLoaded, configurationManager);\n        this.setNativeConfiguration(this.onStabilizing, configurationManager.setOnStabilizing, configurationManager);\n        this.setNativeConfiguration(this.onExtractionFinish, configurationManager.setOnExtractionFinish, configurationManager);\n        this.setNativeConfiguration(this.onUserCancel, configurationManager.setOnUserCancel, configurationManager);\n        this.setNativeConfiguration(this.onExceptionCaptured, configurationManager.setOnExceptionCaptured, configurationManager);\n        this.setNativeConfiguration(this.onLivenessError, configurationManager.setOnLivenessError, configurationManager);\n        this.setNativeConfiguration(this.onLivenessErrorButtonClick, configurationManager.setOnLivenessErrorButtonClick, configurationManager);\n        this.setNativeConfiguration(this.onExtractionTimeout, configurationManager.setOnExtractionTimeout, configurationManager);\n        this.setNativeConfiguration(this.onTimeoutErrorButtonClick, configurationManager.setOnTimeoutErrorButtonClick, configurationManager);\n        this.setNativeConfiguration(this.onTrackStatus, configurationManager.setOnTrackStatus, configurationManager);\n\n        return configurationManager;\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos privados\"\n\n    private setNativeConfiguration(property, configurationSetterFunc, context: any = null) {\n        if (property === null || property === undefined)\n            return;\n\n        const setterFunc = context ? configurationSetterFunc.bind(context) : configurationSetterFunc;\n        setterFunc(property);\n    }\n\n    private tryParseInt(value: any) {\n        var intValue = parseInt(value);\n        return !isNaN(intValue) ? intValue : value;\n    }\n\n    private tryParseFloat(value: any) {\n        var floatValue = parseFloat(value);\n        return !isNaN(floatValue) ? floatValue : value;\n    }\n\n    // #endregion\n}\n","import { timer } from \"rxjs/index\";\n\nexport class RxjsHelper {\n\n    /**\n     * Encapsula una rutina de chequeo de una condiciÃ³n hasta que Ã©sta se cumpla.\n     * @param pollTime Intervalo de chequeo (en ms).\n     * @param evalFunc FunciÃ³n para evaluar la condiciÃ³n deseada.\n     * @param successFunc FunciÃ³n a invocar cuando la condiciÃ³n se cumpla.\n     * @param delayTime Tiempo de retardo para iniciar el proceso de chequeo. Por defecto 0ms.\n     */\n    public static poll(pollTime: number,\n                       evalFunc: any,\n                       successFunc: any,\n                       delayTime: number = 0) {\n        const subscription = timer(delayTime, pollTime)\n            .subscribe(\n                () => {\n                    if (!evalFunc())\n                        return;\n\n                    subscription.unsubscribe();\n                    successFunc();\n                }\n            );\n    }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { Renderer2, RendererFactory2 } from \"@angular/core\";\nimport { DOCUMENT } from \"@angular/common\";\n\nimport { Observable } from \"rxjs\";\nimport { RxjsHelper } from \"./helpers/rxjs-helper\";\n\nimport { FPhiSelphiConfiguration } from \"../models/facephi-selphi-configuration\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FPhiSelphiWidgetService {\n\n    // #region \"Atributos\"\n\n    private _renderer: Renderer2;\n\n    private _assetsBasePath: string;\n    private _fPhiWidgetConfiguration: FPhiSelphiConfiguration;\n    private _fPhiWidget: any;\n\n    // #endregion\n\n    // #region \"Propiedades\"\n\n    private get fPhiSelphiNamespace() { return window[\"FPhi\"] && window[\"FPhi\"].Selphi ? window[\"FPhi\"].Selphi : undefined; }\n\n    private set fPhiSelphiNamespace(value: any) {\n        if (window[\"FPhi\"])\n            window[\"FPhi\"].Selphi = value;\n    }\n\n    private get fPhiWidgetScriptPath(): string { return `${this._assetsBasePath}/FPhi.Widget.wasm.js`; }\n\n    // #endregion\n\n    // #region \"Constructores\"\n\n    constructor(\n        @Inject(DOCUMENT) private document: any,\n        private rendererFactory: RendererFactory2\n    ) {\n        this._renderer = this.rendererFactory.createRenderer(null, null);\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos pÃºblicos\"\n\n    /**\n     * Realiza la carga dinÃ¡mica del recurso javascript del widget web.\n     * @param basePath Ruta base de la carpeta de los ficheros del widget.\n     */\n    public loadControl(basePath: string): Observable<FPhiSelphiWidgetService> {\n        //console.log(`>>>> FPhiSelphiWidgetService :: loadControl --> basePath: ${basePath}`);\n        this._assetsBasePath = basePath;\n\n        const fPhiWidgetScript = this._renderer.createElement(\"script\");\n        this._renderer.setAttribute(fPhiWidgetScript, \"src\", this.fPhiWidgetScriptPath);\n        this._renderer.setAttribute(fPhiWidgetScript, \"type\", \"text/javascript\");\n        this._renderer.appendChild(this.document.body, fPhiWidgetScript);\n\n        return new Observable<FPhiSelphiWidgetService>(subscriber => {\n            RxjsHelper.poll(5,\n                () => this.fPhiSelphiNamespace !== null && this.fPhiSelphiNamespace !== undefined && this.fPhiSelphiNamespace.Widget !== null && this.fPhiSelphiNamespace.Widget !== undefined,\n                () => subscriber.next(this)\n            );\n        });\n    }\n\n    /**\n     * Elimina los recursos javascript del widget incluidos en el DOM de la pÃ¡gina.\n     */\n    public removeControl(): FPhiSelphiWidgetService {\n        if (!this._assetsBasePath)\n            return this;\n\n        //console.warn(`>>>> FPhiSelphiWidgetService :: removeControl(\"${this._assetsBasePath}\")`);\n        delete this._fPhiWidget;\n        delete this._fPhiWidgetConfiguration;\n        delete this.fPhiSelphiNamespace;\n\n        this._fPhiWidget = undefined;\n        this._fPhiWidgetConfiguration = undefined;\n        this.fPhiSelphiNamespace = undefined;\n\n        this.document\n            .querySelectorAll(`script[src*=\"${this._assetsBasePath}\"]`)\n            .forEach(element => { element.parentNode.removeChild(element); });\n\n        this.document\n            .querySelectorAll(\"style#FPhi_Widget_style\")\n            .forEach(element => { element.parentNode.removeChild(element); });\n\n        //console.warn(`>>>> FPhiSelphiWidgetService :: Control removed`);\n        return this;\n    }\n\n    /**\n     * Crea una instancia del widget web nativo con los datos de configuraciÃ³n indicados.\n     * @param config Datos de configuraciÃ³n del widget.\n     */\n    public createUserControl(config: FPhiSelphiConfiguration): FPhiSelphiWidgetService {\n        //console.warn(\">>>> FPhiSelphiWidgetService :: createUserControl\", config, config.getNativeConfiguration());\n\n        this._fPhiWidgetConfiguration = config;\n        this._fPhiWidget = new this.fPhiSelphiNamespace.Widget(config.getNativeConfiguration());\n        //console.log(this._fPhiWidget);\n\n        if (this._fPhiWidgetConfiguration.debugMode !== null && this._fPhiWidgetConfiguration.debugMode !== undefined)\n            this._fPhiWidget.debug = this._fPhiWidgetConfiguration.debugMode;\n\n        //console.log(this._fPhiWidget);\n        return this;\n    }\n\n    /**\n     * Inicia el widget.\n     */\n    public startUserControl(): FPhiSelphiWidgetService {\n        if (this._fPhiWidget)\n            this._fPhiWidget.Start();\n\n        return this;\n    }\n\n    /**\n     * Detiene la ejecuciÃ³n del widget.\n     */\n    public stopUserControl(): FPhiSelphiWidgetService {\n        if (this._fPhiWidget)\n            this._fPhiWidget.Stop();\n\n        return this;\n    }\n\n    // #endregion\n}\n","import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding\n} from \"@angular/core\";\n\nimport { FPhiSelphiConfiguration } from \"../../models/facephi-selphi-configuration\";\nimport { FPhiSelphiWidgetService } from \"../../services/fphi-selphi-widget.service\";\n\n\n@Component({\n    selector: \"facephi-selphi\",\n    templateUrl: \"./facephi-selphi.component.html\",\n    styleUrls: [\"./facephi-selphi.component.scss\"]\n})\nexport class FacePhiSelphiComponent implements OnInit, OnDestroy {\n\n    // #region \"Atributos\"\n\n    private _cssClass: string = \"\";\n    private _widgetConfiguration: FPhiSelphiConfiguration = new FPhiSelphiConfiguration();\n\n    // #endregion\n\n    // #region \"Propiedades\"\n\n    @Input(\"class\")\n    @HostBinding(\"class\")\n    public get cssClass(): string {\n        return this._cssClass;\n    }\n\n    public set cssClass(value: string) {\n        if (value)\n            this._cssClass += ` ${value}`;\n    }\n\n    /**\n     * Anchura del componente.\n     */\n    @Input(\"width\")\n    public componentWidth: any;\n\n    public get widgetWidth(): any {\n        return this.componentWidth\n            ? typeof this.componentWidth === \"string\" && this.componentWidth.endsWith(\"%\")\n                ? this.componentWidth\n                : parseFloat(this.componentWidth) !== NaN\n                    ? `${parseFloat(this.componentWidth)}px`\n                    : this.componentWidth\n            : \"100%\";\n    }\n\n    /**\n     * Altura del componente.\n     */\n    @Input(\"height\")\n    public componentHeight: any;\n\n    public get widgetHeight(): any {\n        return this.componentHeight\n            ? typeof this.componentHeight === \"string\" && this.componentHeight.endsWith(\"%\")\n                ? this.componentHeight\n                : parseFloat(this.componentHeight) !== NaN\n                    ? `${parseFloat(this.componentHeight)}px`\n                    : this.componentHeight\n            : \"100%\";\n    }\n\n    /**\n     * Referencia interna al contenedor sobre el que se generarÃ¡ el widget web.\n     */\n    @ViewChild(\"widgetContainer\")\n    public readonly widgetContainer: ElementRef;\n\n    /**\n     * Clases CSS aplicadas sobre el contenedor del widget web.\n     */\n    @Input()\n    public containerCssClass: string;\n\n    // #region \"ConfiguraciÃ³n\"\n\n    /**\n     * Ruta en la que estÃ¡n localizados los recursos javascript nativos del widget web.\n     */\n    @Input()\n    public widgetLibPath = \"assets/lib/facephi/selphi\";\n\n    /**\n     * Flag para indicar si queremos que sea el componente el encargado de cargar e inicializar todos los recursos javascript del widget y borrarlos en su evento 'onDestroy'.\n     */\n    @Input()\n    public autoLoadLibResources: boolean = true;\n\n    /**\n     * Ruta donde estÃ¡ ubicado el fichero widget.xml y el resto de recursos personalizables del widget.\n     */\n    @Input()\n    public set resourcesPath(value: string) {\n        this._widgetConfiguration.resourcesPath = value;\n    }\n\n    public get resourcesPath(): string { return this._widgetConfiguration.resourcesPath; }\n\n    /**\n     * Ruta donde estÃ¡ ubicado el fichero graph.xml.\n     */\n    @Input()\n    public set graphPath(value: string) {\n        this._widgetConfiguration.graphPath = value;\n    }\n\n    public get graphPath(): string { return this._widgetConfiguration.graphPath; }\n\n    /**\n     * Idioma en que se mostrarÃ¡ la informaciÃ³n del widget.\n     */\n    @Input()\n    public set language(value: string) {\n        this._widgetConfiguration.language = value;\n    }\n\n    public get language(): string { return this._widgetConfiguration.language; }\n\n    /**\n     * Lista de densidades de pÃ­xeles en pantalla soportadas por el widget, de cara a mostrar las imÃ¡genes de recurso adecuadas a la pantalla actual.\n     */\n    @Input()\n    public set dpiList(value: Array<number>) {\n        this._widgetConfiguration.dpiList = value;\n    }\n\n    public get dpiList(): Array<number> { return this._widgetConfiguration.dpiList; }\n\n    /**\n     * ResoluciÃ³n horizontal preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    @Input()\n    public set cameraWidth(value: number) {\n        this._widgetConfiguration.cameraWidth = value;\n    }\n\n    public get cameraWidth(): number { return this._widgetConfiguration.cameraWidth; }\n\n    /**\n     * ResoluciÃ³n vertical preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    @Input()\n    public set cameraHeight(value: number) {\n        this._widgetConfiguration.cameraHeight = value;\n    }\n\n    public get cameraHeight(): number { return this._widgetConfiguration.cameraHeight; }\n\n    /**\n     * RotaciÃ³n de la cÃ¡mara.\n     */\n    @Input()\n    public set cameraRotation(value: any) {\n        this._widgetConfiguration.cameraRotation = value;\n    }\n\n    public get cameraRotation(): any { return this._widgetConfiguration.cameraRotation; }\n\n    /**\n     * Selector de tipo de cÃ¡mara a utilizar para realizar la captura (frontal o trasera).\n     */\n    @Input()\n    public set cameraType(value: any) {\n        this._widgetConfiguration.cameraType = value;\n    }\n\n    public get cameraType(): any { return this._widgetConfiguration.cameraType; }\n\n    /**\n     * Indica si el tutorial estÃ¡ disponible en el widget.\n     */\n    @Input()\n    public set tutorial(value: boolean) {\n        this._widgetConfiguration.tutorial = value;\n    }\n\n    public get tutorial(): boolean { return this._widgetConfiguration.tutorial; }\n\n    /**\n     * Modo de extracciÃ³n o flujo de ejecuciÃ³n utilizado por el widget.\n     */\n    @Input()\n    public set extractionMode(value: any) {\n        this._widgetConfiguration.extractionMode = value;\n    }\n\n    public get extractionMode(): any { return this._widgetConfiguration.extractionMode; }\n\n    /**\n     * Modos de verificaciÃ³n de prueba de vida utilizado por el widget.\n     */\n    @Input()\n    public set livenessMode(value: any) {\n        this._widgetConfiguration.livenessMode = value;\n    }\n\n    public get livenessMode(): any { return this._widgetConfiguration.livenessMode; }\n\n    /**\n     * \n     */\n    @Input()\n    public set livenessPrecision(value: number) {\n        this._widgetConfiguration.livenessPrecision = value;\n    }\n\n    public get livenessPrecision(): number { return this._widgetConfiguration.livenessPrecision; }\n\n    /**\n     * \n     */\n    @Input()\n    public set livenessMoveInitialError(value: number) {\n        this._widgetConfiguration.livenessMoveInitialError = value;\n    }\n\n    public get livenessMoveInitialError(): number { return this._widgetConfiguration.livenessMoveInitialError; }\n\n    /**\n     * \n     */\n    @Input()\n    public set livenessMoveInfoTime(value: number) {\n        this._widgetConfiguration.livenessMoveInfoTime = value;\n    }\n\n    public get livenessMoveInfoTime(): number { return this._widgetConfiguration.livenessMoveInfoTime; }\n\n    /**\n     * Indica si el widget permite la interacciÃ³n con el usuario.\n     */\n    @Input()\n    public set interactible(value: boolean) {\n        this._widgetConfiguration.interactible = value;\n    }\n\n    public get interactible(): boolean { return this._widgetConfiguration.interactible; }\n\n    /**\n     * Tiempo de registro en segundos.\n     */\n    @Input()\n    public set registerTime(value: number) {\n        this._widgetConfiguration.registerTime = value;\n    }\n\n    public get registerTime(): number { return this._widgetConfiguration.registerTime; }\n\n    /**\n     * Tiempo de autenticaciÃ³n en segundos.\n     */\n    @Input()\n    public set authenticateTime(value: number) {\n        this._widgetConfiguration.authenticateTime = value;\n    }\n\n    public get authenticateTime(): number { return this._widgetConfiguration.authenticateTime; }\n\n    /**\n     * Formato de las imÃ¡genes capturadas por el widget (MIME type).\n     */\n    @Input()\n    public set imageFormat(value: string) {\n        this._widgetConfiguration.imageFormat = value;\n    }\n\n    public get imageFormat(): string { return this._widgetConfiguration.imageFormat; }\n\n    /**\n     * Factor de calidad de las imÃ¡genes devueltas (rango 0.0 a 1.0). Ãnicamente aplicable cuando el formato de imagen se ha especificado como \"image/jpeg\".\n     */\n    @Input()\n    public set imageQuality(value: number) {\n        this._widgetConfiguration.imageQuality = value;\n    }\n\n    public get imageQuality(): number { return this._widgetConfiguration.imageQuality; }\n\n    /**\n     * \n     */\n    @Input()\n    public set logImages(value: boolean) {\n        this._widgetConfiguration.logImages = value;\n    }\n\n    public get logImages(): boolean { return this._widgetConfiguration.logImages; }\n\n    /**\n     * Factor de recorte de las imÃ¡genes devueltas por el widget.\n     */\n    @Input()\n    public set cropFactor(value: number) {\n        this._widgetConfiguration.cropFactor = value;\n    }\n\n    public get cropFactor(): number { return this._widgetConfiguration.cropFactor; }\n\n    /**\n     * Indica si el widget debe recortar las imÃ¡genes capturadas, o no.\n     */\n    @Input()\n    public set cropImage(value: boolean) {\n        this._widgetConfiguration.cropImage = value;\n    }\n\n    public get cropImage(): boolean { return this._widgetConfiguration.cropImage; }\n\n    /**\n     * Formato de salida de la informaciÃ³n de template generada por el widget.\n     */\n    @Input()\n    public set templateFormat(value: number) {\n        this._widgetConfiguration.templateFormat = value;\n    }\n\n    public get templateFormat(): number { return this._widgetConfiguration.templateFormat; }\n\n    /**\n     * Activa la fase de estabilizaciÃ³n previa a la captura. Por defecto, la estabilizaciÃ³n estarÃ¡ desactivada.\n     * En caso de haber seleccionado LivenessMode==Move, este parÃ¡metro no se tendrÃ¡ en cuenta y siempre se realizarÃ¡ fase de estabilizado.\n     */\n    @Input()\n    public set stabilizationStage(value: boolean) {\n        this._widgetConfiguration.stabilizationStage = value;\n    }\n\n    public get stabilizationStage(): boolean { return this._widgetConfiguration.stabilizationStage; }\n\n    /**\n     * Indica si el widget debe grabar la sesiÃ³n del usuario en video.\n     */\n    @Input()\n    public set videoRecord(value: boolean) {\n        this._widgetConfiguration.videoRecord = value;\n    }\n\n    public get videoRecord(): boolean { return this._widgetConfiguration.videoRecord; }\n\n    /**\n     * Frecuencia de grabaciÃ³n (en frames por segundo).\n     */\n    @Input()\n    public set videoRecordRate(value: number) {\n        this._widgetConfiguration.videoRecordRate = value;\n    }\n\n    public get videoRecordRate(): number { return this._widgetConfiguration.videoRecordRate; }\n\n    /**\n     * Factor de escalado aplicado sobre las capturas realizadas para la generaciÃ³n del video.\n     * Toma valores porcentuales de 0.0 a 1.0 (que equivaldrÃ­a a una escala del 100% de resoluciÃ³n de cÃ¡mara seleccionada).\n     */\n    @Input()\n    public set videoRecordScale(value: number) {\n        this._widgetConfiguration.videoRecordScale = value;\n    }\n\n    public get videoRecordScale(): number { return this._widgetConfiguration.videoRecordScale; }\n\n    /**\n     * Tipo de salida del video generado. Los posibles valores se tomarÃ¡n del enumerado \"FPhi.Selphi.RecordType\".\n     */\n    @Input()\n    public set videoRecordType(value: any) {\n        this._widgetConfiguration.videoRecordType = value;\n    }\n\n    public get videoRecordType(): any { return this._widgetConfiguration.videoRecordType; }\n\n    /**\n     * Activa el modo de depuraciÃ³n del widget, en el que se mostrarÃ¡n mensajes informativos en la consola del navegador.\n     */\n    @Input()\n    public set debugMode(value: boolean) {\n        this._widgetConfiguration.debugMode = value;\n    }\n\n    public get debugMode(): boolean { return this._widgetConfiguration.debugMode; }\n\n    // #endregion\n\n    // #region \"Eventos\"\n\n    /**\n     * Evento lanzado cuando los recursos del widget se han cargado correctamente.\n     */\n    @Output()\n    public onComponentLoaded = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado por el widget cuando se ha finalizado el proceso de carga e inicializaciÃ³n, tando del widget, como de los recursos asociados al mismo.\n     */\n    @Output()\n    public onModuleLoaded = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado durante los ciclos de estabilizaciÃ³n de la imagen para la correcta realizaciÃ³n de la captura.\n     */\n    @Output()\n    public onStabilizing = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de extracciÃ³n ha finalizado correctamente. Devuelve el resultado de la captura.\n     */\n    @Output()\n    public onExtractionFinish = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el usuario cancela el proceso de extracciÃ³n.\n     */\n    @Output()\n    public onUserCancel = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado en caso de que se produzca un error interno del widget.\n     */\n    @Output()\n    public onExceptionCaptured = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de verificaciÃ³n de autenticidad por prueba de vida falla.\n     */\n    @Output()\n    public onLivenessError = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de verificaciÃ³n de autenticidad por prueba de vida falla y el usuario pulsa el botÃ³n de la pantalla de error mostrada.\n     */\n    @Output()\n    public onLivenessErrorButtonClick = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado si el proceso de captura excede el tiempo mÃ¡ximo disponible.\n     */\n    @Output()\n    public onExtractionTimeout = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de captura excede el tiempo mÃ¡ximo disponible y el usuario pulsa el botÃ³n de la pantalla de error mostrada.\n     */\n    @Output()\n    public onTimeoutErrorButtonClick = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado tras cualquier acciÃ³n realizada por el usuario sobre la interfaz grÃ¡fica del widget o ante cualquier cambio de estado\n     * durante el proceso de captura.\n     */\n    @Output()\n    public onTrackStatus = new EventEmitter<any>();\n\n    // #endregion\n\n    // #endregion\n\n    // #region \"Constructores\"\n\n    constructor(\n        private widgetService: FPhiSelphiWidgetService\n    ) { }\n\n    ngOnInit() {\n        //console.warn(`>>>> [facephi-selphi] ngOnInit { autoLoadLibResources: ${this.autoLoadLibResources} }`, this.widgetContainer.nativeElement);\n        //console.log(`widgetContainer.offsetWidth: ${(this.widgetContainer.nativeElement as any).offsetWidth}`);\n        //console.log(`widgetContainer.offsetHeight: ${(this.widgetContainer.nativeElement as any).offsetHeight}`);\n\n        this._widgetConfiguration.widgetContainer = this.widgetContainer.nativeElement;\n        this.setupEvents();\n\n        const widgetInitFunc = () => {\n            //console.warn(\">>>> [facephi-selphi]  CONTROL LOADED!!\");\n            this.onComponentLoaded.emit();\n\n            this.widgetService\n                .createUserControl(this._widgetConfiguration)\n                .startUserControl();\n        };\n\n        if (this.autoLoadLibResources) {\n            this.widgetService\n                .loadControl(this.widgetLibPath)\n                .subscribe(widgetInitFunc);\n        } else\n            widgetInitFunc();\n    }\n\n    ngOnDestroy() {\n        //console.warn(\">>>> [facephi-selphi] ngOnDestroy\");\n        if (this.autoLoadLibResources) {\n            this.widgetService\n                .stopUserControl()\n                .removeControl();\n        }\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos privados\"\n\n    private setupEvents(): FacePhiSelphiComponent {\n        this._widgetConfiguration.onModuleLoaded = eventData => { this.onModuleLoaded.emit(eventData); };\n        this._widgetConfiguration.onStabilizing = stabilizingResult => { this.onStabilizing.emit(stabilizingResult); };\n        this._widgetConfiguration.onExtractionFinish = extractionResult => { this.onExtractionFinish.emit(extractionResult); };\n        this._widgetConfiguration.onUserCancel = () => { this.onUserCancel.emit(); };\n        this._widgetConfiguration.onExceptionCaptured = exceptionResult => { this.onExceptionCaptured.emit(exceptionResult); };\n        this._widgetConfiguration.onLivenessError = livenessErrorResult => { this.onLivenessError.emit(livenessErrorResult); };\n        this._widgetConfiguration.onLivenessErrorButtonClick = () => { this.onLivenessErrorButtonClick.emit(); };\n        this._widgetConfiguration.onExtractionTimeout = extractionTimeoutResult => { this.onExtractionTimeout.emit(extractionTimeoutResult); };\n        this._widgetConfiguration.onTimeoutErrorButtonClick = () => { this.onTimeoutErrorButtonClick.emit(); };\n        this._widgetConfiguration.onTrackStatus = eventData => { this.onTrackStatus.emit(eventData); };\n\n        return this;\n    }\n\n    // #endregion\n\n}\n","export class FPhiSelphiConstants {\n\n    /**\n     * Modos de rotaciÃ³n de la cÃ¡mara para la realizaciÃ³n de la captura.\n     */\n    public static readonly CameraRotation = {\n        None: 0,\n        Deg90: 1,\n        Deg180: 2,\n        Deg270: 3\n    }\n\n    /**\n     * Modos de extracciÃ³n o flujos de ejecuciÃ³n disponibles en el widget.\n     */\n    public static readonly ExtractionMode = {\n        /**\n         * Registro de usuarios.\n         */\n        Register: 0,\n\n        /**\n         * AutenticaciÃ³n de usuarios.\n         */\n        Authenticate: 1\n    }\n\n    /**\n     * Modos de verificaciÃ³n de prueba de vida disponibles.\n     */\n    public static readonly LivenessMode = {\n        /**\n         * VerificaciÃ³n de prueba de vida desactivada.\n         */\n        None: 0,\n\n        /**\n         * Prueba de vida mediante parpadeo.\n         */\n        Blink: 1,\n\n        /**\n         * Prueba de vida mediante movimiento.\n         */\n        Move: 2,\n\n        /**\n         * Prueba de vida pasivo.\n         */\n        Passive: 3\n    }\n\n    /**\n     * Tipo de excepciÃ³n producida durante la ejecuciÃ³n del widget.\n     */\n    public static readonly ExceptionType = {\n        CameraError: 0,\n        ExtractorError: 1,\n        ControlNotInitializedError: 2,\n        ImageCropResizeError: 3,\n        UnexpectedCaptureError: 4\n    }\n\n    public static readonly SampleDiagnostic = {\n        Ok: 0,\n        FaceNotFound: 1,\n        RightEyeNotFound: 2,\n        LeftEyeNotFound: 3,\n        EyesNotFound: 4,\n        FaceTooFar: 5,\n        FaceTooClose: 6,\n        TooCloseToWindowSide: 7,\n        AngleExceeded: 8,\n        QualityCheckFailed: 9,\n        NotRated: 10\n    }\n\n    public static readonly FinalDiagnostic = {\n        InsufficientValidSamples: 0,\n        TemplateCreationInProgress: 1,\n        TemplateCreated: 2\n    }\n\n    public static readonly LivenessDiagnostic = {\n        NotRated: 0,\n        PhotoDetected: 1,\n        LivenessDetected: 2,\n        Unsuccess: 3,\n        UnsuccessLowPerformance: 4,\n        UnsuccessGlasses: 5,\n        UnsuccessLight: 6,\n        UnsuccessNoMovement: 7,\n        UnsuccessWrongDirection: 8,\n        UnsuccessTooFar: 9\n    }\n\n    /**\n     * Formato de salida de la informaciÃ³n de template generada por el widget.\n     */\n    public static readonly TemplateFormat = {\n        ByteArray: 0,\n        Base64: 1\n    }\n\n    /**\n     * Formato de salida de la grabaciÃ³n del video de sesiÃ³n del usuario. Tipo de proceso utilizado para la generaciÃ³n del video.\n     */\n    public static readonly RecorderType = {\n        Gif: 0,\n        Remote: 1\n    }\n\n    /**\n     * Tipo de cÃ¡mara a utilizar para la captura del selfie.\n     */\n    public static readonly CameraType = {\n        Front: 0,\n        Back: 1\n    }\n\n    /**\n     * Tipo de acciÃ³n que se produce en la interacciÃ³n del usuario con el widget.\n     */\n    public static readonly TrackStatus = {\n        ChangeState: 0,\n        Tap: 1\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { FacePhiSelphiComponent } from \"./components/facephi-selphi/facephi-selphi.component\";\n\n\n@NgModule({\n    declarations: [\n        FacePhiSelphiComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FacePhiSelphiComponent\n    ]\n})\nexport class FacePhiSelphiModule {}\n"],"names":["timer","Observable","Injectable","Inject","DOCUMENT","RendererFactory2","EventEmitter","Component","Input","HostBinding","ViewChild","Output","NgModule","CommonModule"],"mappings":"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"}
