{"version":3,"sources":["ng://facephi-selphid/lib/services/helpers/rxjs-helper.ts","ng://facephi-selphid/lib/services/fphi-selphid-widget.service.ts","ng://facephi-selphid/lib/models/facephi-selphid-configuration.ts","ng://facephi-selphid/lib/components/facephi-selphid/facephi-selphid.component.ts","ng://facephi-selphid/lib/models/facephi-selphid-constants.ts","ng://facephi-selphid/lib/facephi-selphid.module.ts"],"names":["RxjsHelper","poll","pollTime","evalFunc","successFunc","delayTime","subscription","timer","subscribe","unsubscribe","FPhiSelphIdWidgetService","Object","defineProperty","prototype","window","SelphID","undefined","value","this","_assetsBasePath","loadControl","basePath","_this","fPhiWidgetScript","_renderer","createElement","setAttribute","fPhiWidgetScriptPath","appendChild","document","body","Observable","subscriber","fPhiSelphIdNamespace","Widget","next","removeControl","_fPhiWidget","_fPhiWidgetConfiguration","querySelectorAll","forEach","element","parentNode","removeChild","createUserControl","config","getNativeConfiguration","debugMode","debug","startUserControl","Start","stopUserControl","Stop","isWidgetLicensed","http","get","licenseCheckUrl","observe","pipe","map","response","status","Injectable","args","providedIn","Inject","DOCUMENT","RendererFactory2","HttpClient","rendererFactory","createRenderer","FPhiSelphIdConfiguration","configurationManager","ConfigurationManager","setNativeConfiguration","widgetContainer","setContainer","language","setLanguage","dpiList","setDpiList","captureMode","setMode","previewCapture","setPreview","documentDimensions","setDocumentDimensions","qualityThreshold","setQualityThreshold","cropFactor","setCropFactor","forceLandscape","setForceLandscape","canvasHD","setCanvasHD","initialTip","setInitialTip","cameraWidth","setCameraWidth","cameraHeight","setCameraHeight","cameraId","setCameraId","captureTimeout","setCaptureTimeout","captureRetries","setCaptureRetries","captureSensibility","setCaptureSensibility","imageFormat","setImageFormat","imageQuality","setImageQuality","onModuleLoaded","setOnModuleLoaded","onExtractionFinished","setOnExtractionFinish","onUserCancelled","setOnUserCancel","onExceptionCaptured","setOnExceptionCaptured","onExtractionTimeout","setOnExtractionTimeout","onTrackStatus","setOnTrackStatus","property","configurationSetterFunc","context","bind","FacePhiSelphIdComponent","_cssClass","componentWidth","endsWith","parseFloat","componentHeight","_widgetConfiguration","ngOnInit","widgetInitFunc","onComponentLoaded","emit","widgetService","nativeElement","setupEvents","autoLoadLibResources","widgetLibPath","ngOnDestroy","eventData","extractionResult","exceptionResult","Component","selector","template","Input","type","HostBinding","ViewChild","Output","EventEmitter","FPhiSelphIdConstants","CaptureMode","Front","Back","Full","ExceptionType","CameraError","ExtractorError","ControlNotInitializedError","ImageCropResizeError","UnexpectedCaptureError","CaptureSensibility","Low","Normal","High","Auto","TrackStatus","ChangeState","Tap","FacePhiSelphIdModule","NgModule","declarations","imports","CommonModule","HttpClientModule","exports"],"mappings":"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","sourcesContent":["import { timer } from \"rxjs/index\";\n\nexport class RxjsHelper {\n\n    /**\n     * Encapsula una rutina de chequeo de una condiciÃ³n hasta que Ã©sta se cumpla.\n     * @param pollTime Intervalo de chequeo (en ms).\n     * @param evalFunc FunciÃ³n para evaluar la condiciÃ³n deseada.\n     * @param successFunc FunciÃ³n a invocar cuando la condiciÃ³n se cumpla.\n     * @param delayTime Tiempo de retardo para iniciar el proceso de chequeo. Por defecto 0ms.\n     */\n    public static poll(pollTime: number,\n                       evalFunc: any,\n                       successFunc: any,\n                       delayTime: number = 0) {\n        const subscription = timer(delayTime, pollTime)\n            .subscribe(\n                () => {\n                    if (!evalFunc())\n                        return;\n\n                    subscription.unsubscribe();\n                    successFunc();\n                }\n            );\n    }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport { Renderer2, RendererFactory2 } from \"@angular/core\";\nimport { DOCUMENT } from \"@angular/common\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { RxjsHelper } from \"./helpers/rxjs-helper\";\n\nimport { FPhiSelphIdConfiguration } from \"../models/facephi-selphid-configuration\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class FPhiSelphIdWidgetService {\n\n    // #region \"Atributos\"\n\n    private static readonly licenseCheckUrl: string = \"https://ecertic.idcapture.es/auth\";\n\n    private _renderer: Renderer2;\n\n    private _assetsBasePath: string;\n    private _fPhiWidgetConfiguration: FPhiSelphIdConfiguration;\n    private _fPhiWidget: any;\n\n    // #endregion\n\n    // #region \"Propiedades\"\n\n    private get fPhiSelphIdNamespace() { return window[\"FPhi\"] && window[\"FPhi\"].SelphID ? window[\"FPhi\"].SelphID : undefined; }\n\n    private set fPhiSelphIdNamespace(value: any) {\n        if (window[\"FPhi\"])\n            window[\"FPhi\"].SelphID = value;\n    }\n\n    private get fPhiWidgetScriptPath(): string { return `${this._assetsBasePath}/FPhi.Widget.wasm.js`; }\n\n    // #endregion\n\n    // #region \"Constructores\"\n\n    constructor(\n        @Inject(DOCUMENT) private document: any,\n        private rendererFactory: RendererFactory2,\n        private http: HttpClient\n    ) {\n        this._renderer = this.rendererFactory.createRenderer(null, null);\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos pÃºblicos\"\n\n    /**\n     * Realiza la carga dinÃ¡mica del recurso javascript del widget web.\n     * @param basePath Ruta base de la carpeta de los ficheros del widget.\n     */\n    public loadControl(basePath: string): Observable<FPhiSelphIdWidgetService> {\n        //console.log(`>>>> FPhiSelphIdWidgetService :: loadControl --> basePath: ${basePath}`);\n        this._assetsBasePath = basePath;\n\n        const fPhiWidgetScript = this._renderer.createElement(\"script\");\n        this._renderer.setAttribute(fPhiWidgetScript, \"src\", this.fPhiWidgetScriptPath);\n        this._renderer.setAttribute(fPhiWidgetScript, \"type\", \"text/javascript\");\n        this._renderer.appendChild(this.document.body, fPhiWidgetScript);\n\n        return new Observable<FPhiSelphIdWidgetService>(subscriber => {\n            RxjsHelper.poll(5,\n                () => this.fPhiSelphIdNamespace !== null && this.fPhiSelphIdNamespace !== undefined && this.fPhiSelphIdNamespace.Widget !== null && this.fPhiSelphIdNamespace.Widget !== undefined,\n                () => subscriber.next(this)\n            );\n        });\n    }\n\n    /**\n     * Elimina los recursos javascript del widget incluidos en el DOM de la pÃ¡gina.\n     */\n    public removeControl(): FPhiSelphIdWidgetService {\n        if (!this._assetsBasePath)\n            return this;\n\n        //console.warn(`>>>> FPhiSelphIdWidgetService :: removeControl(\"${this._assetsBasePath}\")`);\n        delete this._fPhiWidget;\n        delete this._fPhiWidgetConfiguration;\n        delete this.fPhiSelphIdNamespace;\n\n        this._fPhiWidget = undefined;\n        this._fPhiWidgetConfiguration = undefined;\n        this.fPhiSelphIdNamespace = undefined;\n\n        this.document\n            .querySelectorAll(`script[src*=\"${this._assetsBasePath}\"]`)\n            .forEach(element => { element.parentNode.removeChild(element); });\n\n        this.document\n            .querySelectorAll(\"style#FPhi_Widget_style\")\n            .forEach(element => { element.parentNode.removeChild(element); });\n\n        //console.warn(`>>>> FPhiSelphIdWidgetService :: Control removed`);\n\n        return this;\n    }\n\n    /**\n     * Crea una instancia del widget web nativo con los datos de configuraciÃ³n indicados.\n     * @param config Datos de configuraciÃ³n del widget.\n     */\n    public createUserControl(config: FPhiSelphIdConfiguration): FPhiSelphIdWidgetService {\n        //console.warn(\">>>> FPhiSelphIdWidgetService :: createUserControl\", config, config.getNativeConfiguration());\n        //console.log(`widgetContainer.clientWidth: ${config.widgetContainer.clientWidth}`);\n        //console.log(`widgetContainer.clientHeight: ${config.widgetContainer.clientHeight}`);\n        //console.log(`widgetContainer.offsetWidth: ${config.widgetContainer.offsetWidth}`);\n        //console.log(`widgetContainer.offsetHeight: ${config.widgetContainer.offsetHeight}`);\n        //console.log(`widgetContainer.computedStyleWidth: ${window.getComputedStyle(config.widgetContainer).width}`);\n        //console.log(`widgetContainer.computedStyleHeight: ${window.getComputedStyle(config.widgetContainer).height}`);\n\n        this._fPhiWidgetConfiguration = config;\n        this._fPhiWidget = new this.fPhiSelphIdNamespace.Widget(config.getNativeConfiguration());\n        //console.log(this._fPhiSelphIdWidget);\n\n        if (this._fPhiWidgetConfiguration.debugMode !== null && this._fPhiWidgetConfiguration.debugMode !== undefined)\n            this._fPhiWidget.debug = this._fPhiWidgetConfiguration.debugMode;\n\n        //console.log(this._fPhiSelphIdWidget);\n        return this;\n    }\n\n    /**\n     * Inicia el widget.\n     */\n    public startUserControl(): FPhiSelphIdWidgetService {\n        if (this._fPhiWidget) {\n            // console.warn(\">>>> FPhiSelphIdWidgetService :: startUserControl\");\n            this._fPhiWidget.Start();\n        }\n\n        return this;\n    }\n\n    /**\n     * Detiene la ejecuciÃ³n del widget.\n     */\n    public stopUserControl(): FPhiSelphIdWidgetService {\n        if (this._fPhiWidget) {\n            // console.warn(\">>>> FPhiSelphIdWidgetService :: stopUserControl\");\n            this._fPhiWidget.Stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * Verifica que el entorno de ejecuciÃ³n actual estÃ¡ correctamente licenciado para el uso de las capacidades de detecciÃ³n del widget.\n     */\n    public isWidgetLicensed(): Observable<boolean> {\n        return this.http.get<any>(FPhiSelphIdWidgetService.licenseCheckUrl, { observe: \"response\" })\n            .pipe(map<HttpResponse<any>, boolean>((response: HttpResponse<any>) => response.status !== 403))\n    }\n\n    // #endregion\n}\n","import { FPhiSelphIdConstants } from \"./facephi-selphid-constants\";\n\n/**\n * Modelo con la informaciÃ³n de configuraciÃ³n del widget Selphi.\n */\nexport class FPhiSelphIdConfiguration {\n\n    // #region \"Propiedades\"\n\n    /**\n     * Referencia al elemento del DOM que actÃºa como contenedor del widget web.\n     */\n    public widgetContainer: any;\n\n    /**\n     * Idioma en que se mostrarÃ¡ la informaciÃ³n del widget.\n     */\n    public language: string;\n\n    /**\n     * Lista de densidades de pÃ­xeles en pantalla soportadas por el widget, de cara a mostrar las imÃ¡genes de recurso adecuadas a la pantalla actual.\n     */\n    public dpiList: Array<number>;\n\n    /**\n     * Modo de captura de documento. Controla el flujo de ejecuciÃ³n del widget.\n     */\n    public captureMode: number;\n\n    /**\n     * En caso de estar habilitado, el widget mostrarÃ¡ el documento capturado y solicitarÃ¡ confirmaciÃ³n al usuario.\n     */\n    public previewCapture: boolean;\n\n    /**\n     * Dimensiones fÃ­sicas (en mm) del documento a capturar.\n     */\n    public documentDimensions: FPhiSelphIdDocumentDimensions;\n\n    /**\n     * Umbral de tolerancia para dar por vÃ¡lida una captura de documento.\n     */\n    public qualityThreshold: number;\n\n    /**\n     * Factor de escalado sobre el Ã¡rea de recorte de la imagen del documento. La imagen devuelta se escala de acuerdo con este valor.\n     * Solamente se permiten valores mayores o iguales a 1.0.\n     */\n    public cropFactor: number;\n\n    /**\n     * En caso de estar habilitado, el widget se mostrarÃ¡ siempre en disposiciÃ³n horizontal, rotÃ¡ndose 90 grados en disposiciones verticales.\n     */\n    public forceLandscape: boolean;\n\n    /**\n     * Activa el modo de visualizaciÃ³n del drawer en pantallas de alta densidad.\n     */\n    public canvasHD: boolean;\n\n    /**\n     * Muestra un mensaje de advertencia de uso inicial tras la carga del widget.\n     */\n    public initialTip: boolean;\n\n    /**\n     * ResoluciÃ³n horizontal preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    public cameraWidth: number;\n\n    /**\n     * ResoluciÃ³n vertical preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    public cameraHeight: number;\n    \n    /**\n     * Identificador de la cÃ¡mara a utilizar para la realizaciÃ³n de la captura (si no se especifica, el widget seleccionarÃ¡ la cÃ¡mara trasera expuesta por defecto por el dispositivo).\n     */\n    public cameraId: string;\n\n    /**\n     * Tiempo disponible para la captura de una imagen de documento antes de emitirse un timeout (por defecto 10s). \n     * Valores <= 0.0 anulan la limitaciÃ³n de tiempo de captura.\n     */\n    public captureTimeout: number;\n\n    /**\n     * NÃºmero mÃ¡ximo de reintentos para obtener una captura vÃ¡lida de imagen de documento.\n     * Valores <= 0 establecen un nÃºmero infinito de reintentos.\n     */\n    public captureRetries: number;\n    \n    /**\n     * Sensibilidad de captura durante la detecciÃ³n de bordes del widget.\n     */\n    public captureSensibility: number;\n\n    /**\n     * Formato de las imÃ¡genes capturadas por el widget (MIME type).\n     */\n    public imageFormat: string;\n\n    /**\n     * Factor de calidad de las imÃ¡genes devueltas (rango 0.0 a 1.0). Ãnicamente aplicable cuando el formato de imagen se ha especificado como \"image/jpeg\".\n     */\n    public imageQuality: number;\n\n    /**\n     * Activa el modo de depuraciÃ³n del widget, en el que se mostrarÃ¡n mensajes informativos en la consola del navegador.\n     */\n    public debugMode: boolean = false;\n\n    // #endregion\n\n    // #region \"Eventos\"\n\n    /**\n     * Evento lanzado por el widget cuando se ha finalizado el proceso de carga e inicializaciÃ³n, tando del widget, como de los recursos asociados al mismo.\n     */\n    public onModuleLoaded: any;\n\n    /**\n     * Evento lanzado cuando el proceso de extracciÃ³n ha finalizado correctamente. Devuelve el resultado de la captura.\n     */\n    public onExtractionFinished: any;\n\n    /**\n     * Evento lanzado cuando el usuario cancela el proceso de extracciÃ³n.\n     */\n    public onUserCancelled: any;\n\n    /**\n     * Evento lanzado en caso de que se produzca un error interno del widget.\n     */\n    public onExceptionCaptured: any;\n\n    /**\n     * Evento lanzado si el proceso de captura excede el tiempo mÃ¡ximo disponible.\n     */\n    public onExtractionTimeout: any;\n\n    /**\n     * Evento lanzado tras cualquier acciÃ³n realizada por el usuario sobre la interfaz grÃ¡fica del widget o ante cualquier cambio de estado\n     * durante el proceso de captura.\n     */\n    public onTrackStatus: any;\n\n    // #endregion\n\n    // #region \"MÃ©todos pÃºblicos\"\n\n    /**\n     * Genera una instancia de \"FPhi.SelphID.ConfigurationManager\" con los datos de configuraciÃ³n de la instancia actual para inicializar el widget.\n     */\n    public getNativeConfiguration() {\n        const configurationManager = new window[\"FPhi\"].SelphID.ConfigurationManager();\n\n        // Propiedades de configuraciÃ³n\n        this.setNativeConfiguration(this.widgetContainer, configurationManager.setContainer, configurationManager);\n        this.setNativeConfiguration(this.language, configurationManager.setLanguage, configurationManager);\n        this.setNativeConfiguration(this.dpiList, configurationManager.setDpiList, configurationManager);\n        \n        this.setNativeConfiguration(this.captureMode, configurationManager.setMode, configurationManager);\n        this.setNativeConfiguration(this.previewCapture, configurationManager.setPreview, configurationManager);\n        this.setNativeConfiguration(this.documentDimensions, configurationManager.setDocumentDimensions, configurationManager);\n        \n        this.setNativeConfiguration(this.qualityThreshold, configurationManager.setQualityThreshold, configurationManager);\n        this.setNativeConfiguration(this.cropFactor, configurationManager.setCropFactor, configurationManager);\n        this.setNativeConfiguration(this.forceLandscape, configurationManager.setForceLandscape, configurationManager);\n        this.setNativeConfiguration(this.canvasHD, configurationManager.setCanvasHD, configurationManager);\n        this.setNativeConfiguration(this.initialTip, configurationManager.setInitialTip, configurationManager);\n        \n        this.setNativeConfiguration(this.cameraWidth, configurationManager.setCameraWidth, configurationManager);\n        this.setNativeConfiguration(this.cameraHeight, configurationManager.setCameraHeight, configurationManager);\n        this.setNativeConfiguration(this.cameraId, configurationManager.setCameraId, configurationManager);\n        \n        this.setNativeConfiguration(this.captureTimeout, configurationManager.setCaptureTimeout, configurationManager);\n        this.setNativeConfiguration(this.captureRetries, configurationManager.setCaptureRetries, configurationManager);\n        this.setNativeConfiguration(this.captureSensibility, configurationManager.setCaptureSensibility, configurationManager);\n        \n        this.setNativeConfiguration(this.imageFormat, configurationManager.setImageFormat, configurationManager);\n        this.setNativeConfiguration(this.imageQuality, configurationManager.setImageQuality, configurationManager);\n\n        // Eventos\n        this.setNativeConfiguration(this.onModuleLoaded, configurationManager.setOnModuleLoaded, configurationManager);\n        this.setNativeConfiguration(this.onExtractionFinished, configurationManager.setOnExtractionFinish, configurationManager);\n        this.setNativeConfiguration(this.onUserCancelled, configurationManager.setOnUserCancel, configurationManager);\n        this.setNativeConfiguration(this.onExceptionCaptured, configurationManager.setOnExceptionCaptured, configurationManager);\n        this.setNativeConfiguration(this.onExtractionTimeout, configurationManager.setOnExtractionTimeout, configurationManager);\n        this.setNativeConfiguration(this.onTrackStatus, configurationManager.setOnTrackStatus, configurationManager);\n\n        return configurationManager;\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos privados\"\n\n    private setNativeConfiguration(property, configurationSetterFunc, context: any = null) {\n        if (property === null || property === undefined)\n            return;\n\n        const setterFunc = context ? configurationSetterFunc.bind(context) : configurationSetterFunc;\n        setterFunc(property);\n    }\n\n    // #endregion\n}\n\n/**\n * Datos de dimensiones del documento capturado por el widget.\n */\nexport class FPhiSelphIdDocumentDimensions {\n    public x: number;\n    public y: number;\n    public width: number;\n    public height: number;\n}\n","import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding\n} from \"@angular/core\";\n\nimport { FPhiSelphIdWidgetService } from \"../../services/fphi-selphid-widget.service\";\nimport { FPhiSelphIdConfiguration, FPhiSelphIdDocumentDimensions } from \"../../models/facephi-selphid-configuration\";\n\n@Component({\n    selector: \"facephi-selphid\",\n    templateUrl: \"./facephi-selphid.component.html\",\n    styleUrls: [\"./facephi-selphid.component.scss\"]\n})\nexport class FacePhiSelphIdComponent implements OnInit, OnDestroy {\n\n    // #region \"Atributos\"\n\n    private _cssClass: string = \"\";\n    private _widgetConfiguration: FPhiSelphIdConfiguration = new FPhiSelphIdConfiguration();\n\n    // #endregion\n\n    // #region \"Propiedades\"\n\n    @Input(\"class\")\n    @HostBinding(\"class\")\n    public get cssClass(): string {\n        return this._cssClass;\n    }\n\n    public set cssClass(value: string) {\n        if (value)\n            this._cssClass += ` ${value}`;\n    }\n\n    /**\n     * Anchura del componente.\n     */\n    @Input(\"width\")\n    public componentWidth: string;\n\n    public get widgetWidth(): string {\n        return this.componentWidth\n            ? typeof this.componentWidth === \"string\" && this.componentWidth.endsWith(\"%\")\n                ? this.componentWidth\n                : `${parseFloat(this.componentWidth)}px`\n            : \"100%\";\n    }\n\n    /**\n     * Altura del componente.\n     */\n    @Input(\"height\")\n    public componentHeight: string;\n\n    public get widgetHeight(): string {\n        return this.componentHeight\n            ? typeof this.componentWidth === \"string\" && this.componentHeight.endsWith(\"%\")\n                ? this.componentHeight\n                : `${parseFloat(this.componentHeight)}px`\n            : \"100%\";\n    }\n\n    /**\n     * Referencia interna al contenedor sobre el que se generarÃ¡ el widget web.\n     */\n    @ViewChild(\"widgetContainer\")\n    public readonly widgetContainer: ElementRef;\n\n    /**\n     * Clases CSS aplicadas sobre el contenedor del widget web.\n     */\n    @Input()\n    public containerCssClass: string;\n\n    // #region \"ConfiguraciÃ³n\"\n\n    /**\n     * Ruta en la que estÃ¡n localizados los recursos javascript nativos del widget web.\n     */\n    @Input()\n    public widgetLibPath = \"assets/lib/facephi/selphid\";\n\n    /**\n     * Flag para indicar si queremos que sea el componente el encargado de cargar e inicializar todos los recursos javascript del widget y borrarlos en su evento 'onDestroy'.\n     */\n    @Input()\n    public autoLoadLibResources: boolean = true;\n\n    /**\n     * Idioma en que se mostrarÃ¡ la informaciÃ³n del widget.\n     */\n    @Input()\n    public set language(value: string) {\n        this._widgetConfiguration.language = value;\n    }\n\n    public get language(): string { return this._widgetConfiguration.language; }\n\n    /**\n     * Lista de densidades de pÃ­xeles en pantalla soportadas por el widget, de cara a mostrar las imÃ¡genes de recurso adecuadas a la pantalla actual.\n     */\n    @Input()\n    public set dpiList(value: Array<number>) {\n        this._widgetConfiguration.dpiList = value;\n    }\n\n    public get dpiList(): Array<number> { return this._widgetConfiguration.dpiList; }\n\n    /**\n     * Modo de captura de documento. Controla el flujo de ejecuciÃ³n del widget.\n     */\n    @Input()\n    public set captureMode(value: number) {\n        this._widgetConfiguration.captureMode = value;\n    }\n\n    public get captureMode(): number { return this._widgetConfiguration.captureMode; }\n\n    /**\n     * En caso de estar habilitado, el widget mostrarÃ¡ el documento capturado y solicitarÃ¡ confirmaciÃ³n al usuario.\n     */\n    @Input()\n    public set previewCapture(value: boolean) {\n        this._widgetConfiguration.previewCapture = value;\n    }\n\n    public get previewCapture(): boolean { return this._widgetConfiguration.previewCapture; }\n\n    /**\n     * Dimensiones fÃ­sicas (en mm) del documento a capturar.\n     */\n    @Input()\n    public set documentDimensions(value: FPhiSelphIdDocumentDimensions) {\n        this._widgetConfiguration.documentDimensions = value;\n    }\n\n    public get documentDimensions(): FPhiSelphIdDocumentDimensions { return this._widgetConfiguration.documentDimensions; }\n\n    /**\n     * Umbral de tolerancia para dar por vÃ¡lida una captura de documento.\n     */\n    @Input()\n    public set qualityThreshold(value: number) {\n        this._widgetConfiguration.qualityThreshold = value;\n    }\n\n    public get qualityThreshold(): number { return this._widgetConfiguration.qualityThreshold; }\n\n    /**\n     * Factor de escalado sobre el Ã¡rea de recorte de la imagen del documento. La imagen devuelta se escala de acuerdo con este valor.\n     * Solamente se permiten valores mayores o iguales a 1.0.\n     */\n    @Input()\n    public set cropFactor(value: number) {\n        this._widgetConfiguration.cropFactor = value;\n    }\n\n    public get cropFactor(): number { return this._widgetConfiguration.cropFactor; }\n\n    /**\n     * En caso de estar habilitado, el widget se mostrarÃ¡ siempre en disposiciÃ³n horizontal, rotÃ¡ndose 90 grados en disposiciones verticales.\n     */\n    @Input()\n    public set forceLandscape(value: boolean) {\n        this._widgetConfiguration.forceLandscape = value;\n    }\n\n    public get forceLandscape(): boolean { return this._widgetConfiguration.forceLandscape; }\n\n    /**\n     * Activa el modo de visualizaciÃ³n del drawer en pantallas de alta densidad.\n     */\n    @Input()\n    public set canvasHD(value: boolean) {\n        this._widgetConfiguration.canvasHD = value;\n    }\n\n    public get canvasHD(): boolean { return this._widgetConfiguration.canvasHD; }\n\n    /**\n     * Muestra un mensaje de advertencia de uso inicial tras la carga del widget.\n     */\n    @Input()\n    public set initialTip(value: boolean) {\n        this._widgetConfiguration.initialTip = value;\n    }\n\n    public get initialTip(): boolean { return this._widgetConfiguration.initialTip; }\n\n    /**\n     * ResoluciÃ³n horizontal preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    @Input()\n    public set cameraWidth(value: number) {\n        this._widgetConfiguration.cameraWidth = value;\n    }\n\n    public get cameraWidth(): number { return this._widgetConfiguration.cameraWidth; }\n\n    /**\n     * ResoluciÃ³n vertical preferida de la cÃ¡mara (el widget intentarÃ¡ seleccionar la resoluciÃ³n mÃ¡s cercana).\n     */\n    @Input()\n    public set cameraHeight(value: number) {\n        this._widgetConfiguration.cameraHeight = value;\n    }\n\n    public get cameraHeight(): number { return this._widgetConfiguration.cameraHeight; }\n\n    /**\n     * Identificador de la cÃ¡mara a utilizar para la realizaciÃ³n de la captura (si no se especifica, el widget seleccionarÃ¡ la cÃ¡mara trasera expuesta por defecto por el dispositivo).\n     */\n    @Input()\n    public set cameraId(value: string) {\n        this._widgetConfiguration.cameraId = value;\n    }\n\n    public get cameraId(): string { return this._widgetConfiguration.cameraId; }\n\n    /**\n     * Tiempo disponible para la captura de una imagen de documento antes de emitirse un timeout (por defecto 10s). \n     * Valores <= 0.0 anulan la limitaciÃ³n de tiempo de captura.\n     */\n    @Input()\n    public set captureTimeout(value: number) {\n        this._widgetConfiguration.captureTimeout = value;\n    }\n\n    public get captureTimeout(): number { return this._widgetConfiguration.captureTimeout; }\n\n    /**\n     * NÃºmero mÃ¡ximo de reintentos para obtener una captura vÃ¡lida de imagen de documento.\n     * Valores <= 0 establecen un nÃºmero infinito de reintentos.\n     */\n    @Input()\n    public set captureRetries(value: number) {\n        this._widgetConfiguration.captureRetries = value;\n    }\n\n    public get captureRetries(): number { return this._widgetConfiguration.captureRetries; }\n\n    \n    /**\n     * Sensibilidad de captura durante la detecciÃ³n de bordes del widget.\n     */\n    @Input()\n    public set captureSensibility(value: number) {\n        this._widgetConfiguration.captureSensibility = value;\n    }\n\n    public get captureSensibility(): number { return this._widgetConfiguration.captureSensibility; }\n\n    /**\n     * Formato de las imÃ¡genes capturadas por el widget (MIME type).\n     */\n    @Input()\n    public set imageFormat(value: string) {\n        this._widgetConfiguration.imageFormat = value;\n    }\n\n    public get imageFormat(): string { return this._widgetConfiguration.imageFormat; }\n\n    /**\n     * Factor de calidad de las imÃ¡genes devueltas (rango 0.0 a 1.0). Ãnicamente aplicable cuando el formato de imagen se ha especificado como \"image/jpeg\".\n     */\n    @Input()\n    public set imageQuality(value: number) {\n        this._widgetConfiguration.imageQuality = value;\n    }\n\n    public get imageQuality(): number { return this._widgetConfiguration.imageQuality; }\n\n    /**\n     * Activa el modo de depuraciÃ³n del widget, en el que se mostrarÃ¡n mensajes informativos en la consola del navegador.\n     */\n    @Input()\n    public set debugMode(value: boolean) {\n        this._widgetConfiguration.debugMode = value;\n    }\n\n    public get debugMode(): boolean { return this._widgetConfiguration.debugMode; }\n\n    // #endregion\n\n    // #region \"Eventos\"\n\n    /**\n     * Evento lanzado cuando los recursos del widget se han cargado correctamente.\n     */\n    @Output()\n    public onComponentLoaded = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado por el widget cuando se ha finalizado el proceso de carga e inicializaciÃ³n, tando del widget, como de los recursos asociados al mismo.\n     */\n    @Output()\n    public onModuleLoaded = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el proceso de extracciÃ³n ha finalizado correctamente. Devuelve el resultado de la captura.\n     */\n    @Output()\n    public onExtractionFinished = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado cuando el usuario cancela el proceso de extracciÃ³n.\n     */\n    @Output()\n    public onUserCancelled = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado en caso de que se produzca un error interno del widget.\n     */\n    @Output()\n    public onExceptionCaptured = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado si el proceso de captura excede el tiempo mÃ¡ximo disponible.\n     */\n    @Output()\n    public onExtractionTimeout = new EventEmitter<any>();\n\n    /**\n     * Evento lanzado tras cualquier acciÃ³n realizada por el usuario sobre la interfaz grÃ¡fica del widget o ante cualquier cambio de estado\n     * durante el proceso de captura.\n     */\n    @Output()\n    public onTrackStatus = new EventEmitter<any>();\n\n    // #endregion\n\n    // #endregion\n\n    // #region \"Constructores\"\n\n    constructor(\n        private widgetService: FPhiSelphIdWidgetService\n    ) { }\n\n    ngOnInit() {\n        //console.warn(`>>>> [facephi-selphid] ngOnInit { autoLoadLibResources: ${this.autoLoadLibResources} }`, this.widgetContainer.nativeElement);\n        //console.log(`widgetContainer.offsetWidth: ${(this.widgetContainer.nativeElement as any).offsetWidth}`);\n        //console.log(`widgetContainer.offsetHeight: ${(this.widgetContainer.nativeElement as any).offsetHeight}`);\n        this._widgetConfiguration.widgetContainer = this.widgetContainer.nativeElement;\n        this.setupEvents();\n\n        const widgetInitFunc = () => {\n            //console.warn(\">>>> [facephi-selphid]  CONTROL LOADED!!\");\n            this.onComponentLoaded.emit();\n\n            this.widgetService\n                .createUserControl(this._widgetConfiguration)\n                .startUserControl();\n        };\n\n        if (this.autoLoadLibResources) {\n            this.widgetService\n                .loadControl(this.widgetLibPath)\n                .subscribe(widgetInitFunc);\n        } else\n            widgetInitFunc();\n    }\n\n    ngOnDestroy() {\n        if (this.autoLoadLibResources) {\n            this.widgetService\n                .stopUserControl()\n                .removeControl();\n        }\n    }\n\n    // #endregion\n\n    // #region \"MÃ©todos privados\"\n\n    private setupEvents(): FacePhiSelphIdComponent {\n        this._widgetConfiguration.onModuleLoaded = eventData => { this.onModuleLoaded.emit(eventData); };\n        this._widgetConfiguration.onExtractionFinished = extractionResult => { this.onExtractionFinished.emit(extractionResult); };\n        this._widgetConfiguration.onUserCancelled = () => { this.onUserCancelled.emit(); };\n        this._widgetConfiguration.onExceptionCaptured = exceptionResult => { this.onExceptionCaptured.emit(exceptionResult); };\n        this._widgetConfiguration.onExtractionTimeout = () => { this.onExtractionTimeout.emit(); };\n        this._widgetConfiguration.onTrackStatus = eventData => { this.onTrackStatus.emit(eventData); };\n\n        return this;\n    }\n\n    // #endregion\n\n}\n","export class FPhiSelphIdConstants {\n    /**\n     * Modo de funcionamiento del widget a la hora de realizar la captura del documento.\n     */\n    public static readonly CaptureMode = {\n        /**\n         * Captura Ãºnicamente el frente del documento.\n         */\n        Front: 0,\n\n        /**\n         * Captura Ãºnicamente el dorso del documento.\n         */\n        Back: 1,\n\n        /**\n         * Realiza una captura de ambas partes del documento.\n         */\n        Full: 2\n    }\n\n    /**\n     * Tipo de excepciÃ³n producida durante la ejecuciÃ³n del widget.\n     */\n    public static readonly ExceptionType = {\n        CameraError: 0,\n        ExtractorError: 1,\n        ControlNotInitializedError: 2,\n        ImageCropResizeError: 3,\n        UnexpectedCaptureError: 4\n    }\n\n    /**\n     * Niveles de sensibilidad de captura en las capacidades de detecciÃ³n de bordes del widget.\n     */\n    public static readonly CaptureSensibility = {\n        Low: 0,\n        Normal: 1,\n        High: 2,\n        Auto: 3\n    }\n\n    /**\n     * Tipo de acciÃ³n que se produce en la interacciÃ³n del usuario con el widget.\n     */\n    public static readonly TrackStatus = {\n        ChangeState: 0,\n        Tap: 1\n    }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { FacePhiSelphIdComponent } from \"./components/facephi-selphid/facephi-selphid.component\";\n\n\n@NgModule({\n    declarations: [\n        FacePhiSelphIdComponent\n    ],\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    exports: [\n        FacePhiSelphIdComponent\n    ]\n})\nexport class FacePhiSelphIdModule {}\n"]}